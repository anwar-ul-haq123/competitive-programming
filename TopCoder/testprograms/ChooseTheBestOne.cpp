#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define infinity (1 << 28)
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define SZ(v) (int)(v.size())
#define eps 10e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;

#define MAX 100010
/*************************************************HABIJABI ENDS HERE******************************************************/

vector <LL> cur, tem;

class ChooseTheBestOne {
public:
	int countNumber(LL N) {
	    LL i, cube = 1, pos;
	    cur.clear(), tem.clear();
	    for(i = 0; i <= N; i++)
            cur.pb(i);
		while(N - 1)
        {
            pos = (cube * cube * cube) % N;
            if(pos == 0) pos = N;
            tem.clear();
            tem.pb(0);
            for(i = pos + 1; i < SZ(cur); i++)
                tem.pb(cur[i]);
            for(i = 1; i < pos; i++)
                tem.pb(cur[i]);
            cur.clear();
            for(i = 0; i < SZ(tem); i++)
                cur.pb(tem[i]);
            cube++;
            N--;
        }
//        cout << SZ(cur) << endl;
        return cur[1];
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	ChooseTheBestOne *obj;
	int answer;
	obj = new ChooseTheBestOne();
	clock_t startTime = clock();
	answer = obj->countNumber(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	int p0;
	int p1;

	// ----- test 0 -----
	disabled = false;
	p0 = 3;
	p1 = 2;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = 6;
	p1 = 6;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = 10;
	p1 = 8;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = 1234;
	p1 = 341;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = 5000;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, false, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// Shiny wants to give an award to one of the employees in her company.
// However, all her employees are doing perfect work, so it's hard to pick the one that gets the award.
// Therefore Shiny organized a game they will play to determine the winner.
//
// At the beginning of the game, all N employees form a circle.
// Then, they receive t-shirts with numbers 1 through N in clockwise order along the circle.
// These numbers are never used in the game, we will just use them to identify the winner.
//
// The game is played in turns.
// The turns are numbered starting from 1.
// In each turn, Shiny starts by standing in front of some employee (as specified below) and saying "one".
// Then she moves clockwise along the circle to the next employee and says "two".
// And so on, until the number she says reaches the threshold for that particular turn.
// The threshold for turn number t is t^3.
// (That is, the threshold is 1 for turn 1, 8 for turn 2, 27 for turn 3, and so on.)
//
// At the end of each turn, the employee currently standing in front of Shiny (i.e., the one that received the number t^3) is eliminated.
// In the very first round Shiny starts in front of the employee with the number 1 on their t-shirt.
// In each of the following rounds, Shiny starts in front of the next employee clockwise from the one who just got eliminated.
//
// When there is only one employee left in the game, the game ends and the employee wins the award.
//
// You are given the int N.
// Return the t-shirt number of the employee who gets the award.
//
//
// DEFINITION
// Class:ChooseTheBestOne
// Method:countNumber
// Parameters:int
// Returns:int
// Method signature:int countNumber(int N)
//
//
// CONSTRAINTS
// -N will between 1 and 5000, inclusive.
//
//
// EXAMPLES
//
// 0)
// 3
//
// Returns: 2
//
// In the first round, Shiny stands in front of employee 1, says "one" and eliminates him.
// In the second round, Shiny starts in front of employee 2. She says "one" to employee 2, "two" to
// employee 3, "three" to employee 2 again, ..., and "eight" to employee 3. Thus, employee 3
// gets eliminated and employee 2 wins the award.
//
//
// 1)
// 6
//
// Returns: 6
//
//
//
// 2)
// 10
//
// Returns: 8
//
//
//
// 3)
// 1234
//
// Returns: 341
//
//
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
