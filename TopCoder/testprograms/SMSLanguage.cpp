#include <bits/stdc++.h>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pub push_back
#define pob pop_back
#define infinity 2147483647
#define LL long long
#define Pi acos(-1)
#define SZ 100010
#define VI vector <int>
#define all(v) v.begin(), v.end()

#define _ ios_base::sync_with_stdio(0);cin.tie(0);

///int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
///int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
///int col[4] = {1, 0, -1, 0};
///int row[4] = {0, 1, 0, -1};
///int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y;};

template <class T> T sqr(T a){return a * a;};
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}
template <class T> T GCD(T a, T b) {if(b == 0) return a; return GCD(b, a % b);}
template <class T> T LCM(T a, T b) {return (a * b) / GCD(a, b);}
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}
template <class T> string tostr(T n) {stringstream ss; ss << n; return ss.str();}


class SMSLanguage {
public:
	string translate(string text) {
	_
	string ans, var;
	for(int i = 0; i < text.size(); i++)
    {
        if(text[i] == '.' || text[i] == ',' || text[i] == '!' || text[i] == '?')
            continue;
        var += tolower(text[i]);
    }
    for(int i = 0; i < var.size(); i++)
    {
        string tem;
            tem = var.substr(i, 3);
            if(tem == "and")
            {
                ans += "&";
                i += 2;
                continue;
            }
            if(tem == "ate")
            {
                ans += "8";
                i += 2;
                continue;
            }
            if(tem == "you")
            {
                ans += "U";
                i += 2;
                continue;
            }
            tem = var.substr(i, 2);
            if(tem == "at")
            {
                ans += "@";
                i += 1;
                continue;
            }
            ans += var[i];
        }
        return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	SMSLanguage *obj;
	string answer;
	obj = new SMSLanguage();
	clock_t startTime = clock();
	answer = obj->translate(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	string p1;

	{
	// ----- test 0 -----
	p0 = "I HATE rats, and you?";
	p1 = "i h8 r@s & U";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "What is the weather like today?";
	p1 = "wh@ is the we@her like today";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "It is not too late to..";
	p1 = "it is not too l8 to";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "this text is already in sms language";
	p1 = "this text is already in sms language";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// SMS messages are short messages sent between mobile phones.  The maximum length of a single message is 160 characters, so it is often necessary to abbreviate words.
//
// You are given a string text, and your task is to translate it to SMS language according to the following rules:
//
//   Remove all punctuation symbols ('.', ',', '?' and '!').
//   Replace all uppercase letters with their lowercase equivalents.
//   Replace all occurrences of "and" with '&'.
//   Replace all occurrences of "ate" with '8'.
//   Replace all occurrences of "at" with '@'.
//   Replace all occurrences of "you" with 'U'.
//
// All quotes are for clarity only.  The rules must be applied in the order they appear in the list. For example, "I HATE rats, and you?" will be translated to "i h8 r@s & U".
// Return the resulting translation as a string.
//
// DEFINITION
// Class:SMSLanguage
// Method:translate
// Parameters:string
// Returns:string
// Method signature:string translate(string text)
//
//
// CONSTRAINTS
// -text will contain between 1 and 50 characters, inclusive.
// -text will contain only letters ('a'-'z', 'A'-'Z'), the characters ',', '.', '!', '?', and spaces (' ').
//
//
// EXAMPLES
//
// 0)
// "I HATE rats, and you?"
//
// Returns: "i h8 r@s & U"
//
// The example from the problem statement.
//
// 1)
// "What is the weather like today?"
//
// Returns: "wh@ is the we@her like today"
//
//
//
// 2)
// "It is not too late to.."
//
// Returns: "it is not too l8 to"
//
//
//
// 3)
// "this text is already in sms language"
//
// Returns: "this text is already in sms language"
//
//
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
