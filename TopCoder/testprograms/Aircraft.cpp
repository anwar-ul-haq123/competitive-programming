#include <bits/stdc++.h>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pub push_back
#define pob pop_back
#define infinity 2147483647
#define LL long long
#define Pi acos(-1)
#define SZ 100010
#define VI vector <int>
#define all(v) v.begin(), v.end()

#define _ ios_base::sync_with_stdio(0);cin.tie(0);

///int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
///int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
///int col[4] = {1, 0, -1, 0};
///int row[4] = {0, 1, 0, -1};
///int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y;};

template <class T> T sqr(T a){return a * a;};
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}
template <class T> T GCD(T a, T b) {if(b == 0) return a; return GCD(b, a % b);}
template <class T> T LCM(T a, T b) {return (a * b) / GCD(a, b);}
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}
template <class T> string tostr(T n) {stringstream ss; ss << n; return ss.str();}


class Aircraft {
public:
    double check(int t, vector <int> p1, vector <int> v1, vector <int> p2, vector <int> v2)
    {
        double a = (double) p1[0] + (double) t * v1[0];
        double b = (double)  p1[1] + (double) t * v1[1];
        double c =  (double) p1[2] + (double) t * v1[2];

        double d = (double)  p2[0] + (double) t * v2[0];
        double e = (double)  p2[1] + (double) t * v2[1];
        double f = (double)  p2[2] + (double) t * v2[2];

        return sqrt(sqr(a-d) + sqr(b-e) + sqr(c-f));
    }
	string nearMiss(vector <int> p1, vector <int> v1, vector <int> p2, vector <int> v2, int R) {
	_
    int low = 0, high = 50000, i, j, ager = sqr(R);
    double mid;
    while(low < high)
    {
        mid = double (low + high) / 2;
        double val = check(mid, p1, v1, p2, v2);
        cout << mid << ' ' << val << endl;
        if(val >= 0 && val <= R)
        {
            return "YES";
        }
        int barle = check(mid + .5, p1, v1, p2, v2);
        int komle = check(mid - .5, p1, v1, p2, v2);
        if(abs(R - barle) > abs(R - komle))
            high = mid - .5;
        else
            low = mid + .5;
    }
    double tem = mid - 10;
    for(i = 0; tem < mid; i++)
    {
        cout << tem << ' ' << check(tem + .2, p1, v1, p2, v2) << endl;
        if(check(tem + .2, p1, v1, p2, v2) <= R)
            return "YES";
        tem += .2;
    }
    return "NO";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, vector <int> p3, int p4, bool hasAnswer, string p5) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}" << "," << p4;
	cout << "]" << endl;
	Aircraft *obj;
	string answer;
	obj = new Aircraft();
	clock_t startTime = clock();
	answer = obj->nearMiss(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p5 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	vector <int> p3;
	int p4;
	string p5;

	{
	// ----- test 0 -----
	int t0[] = {15,50,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {25,1,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {161,102,9};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {-10,-10,-1};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 10;
	p5 = "YES";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {0,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,2,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {9,0,5};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {-2,2,0};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 5;
	p5 = "YES";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {0,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {-2,2,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {9,0,5};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {2,2,0};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 5;
	p5 = "NO";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {-2838,-7940,-2936};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,1,-2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {532,3850,9590};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {1,0,-3};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 3410;
	p5 = "YES";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	int t0[] = {-8509,9560,345};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {-89,-33,62};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {-5185,-1417,2846};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {-58,24,26};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 8344;
	p5 = "YES";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	int t0[] = {-7163,-371,-2459};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {-59,-41,-14};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {-2398,-426,-5487};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {-43,27,67};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 5410;
	p5 = "NO";
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}

	{
	// ----- test 6 -----
	int t0[] = {1774,-4491,7810};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {-12,19,-24};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2322,3793,9897};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {-12,19,-24};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 10000;
	p5 = "YES";
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}

	{
	// ----- test 7 -----
	int t0[] = {3731,8537,5661};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {-70,71,32};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {8701,-1886,-5115};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {28,-13,7};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 9766;
	p5 = "NO";
	all_right = KawigiEdit_RunTest(7, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// In aviation, a "near miss" occurs if the distance between two aircraft at some point in time is less than or equal to some threshold distance R. At a moment in time, the positions and velocities of two aircraft are known exactly. Assuming that each aircraft continues to fly with constant speed and direction, you need to work out if the aircraft will undergo a near miss now or at some point in the future.
//
// You will be given the threshold distance R and the positions and velocities of the aircraft in 4 vector <int>s: p1, v1, p2 and v2. The position of the first aircraft in 3-D cartesian space is given by (p1[0] , p1[1] , p1[2]) and its velocity vector by (v1[0] , v1[1] , v1[2]) and similarly the second aircraft's position and velocity are given by (p2[0] , p2[1] , p2[2]) and (v2[0] , v2[1] , v2[2]). So, if an aircraft's initial position is the vector p and its velocity vector is v, the position of this aircraft at some future time t will be p + v * t. You should return a String containing "YES" if the aircraft will undergo a near miss now or in the future or "NO" if they won't (quotes for clarity).
//
// DEFINITION
// Class:Aircraft
// Method:nearMiss
// Parameters:vector <int>, vector <int>, vector <int>, vector <int>, int
// Returns:string
// Method signature:string nearMiss(vector <int> p1, vector <int> v1, vector <int> p2, vector <int> v2, int R)
//
//
// NOTES
// -The distance between two points (x1, y1, z1) and (x2, y2, z2) is given by sqrt((x1-x2)2 + (y1-y2)2 + (z1-z2)2).
//
//
// CONSTRAINTS
// -p1, v1, p2 and v2 will contain exactly 3 elements.
// -Each element of p1, v1, p2 and v2 will be between -10000 and 10000, inclusive.
// -R will be between 0 and 10000, inclusive.
//
//
// EXAMPLES
//
// 0)
// {15,50,5}
// {25,1,0}
// {161,102,9}
// {-10,-10,-1}
// 10
//
// Returns: "YES"
//
// At time 4, the first aircraft will be at position {115,54,5} and the second at {121,62,5}, which is the first point in time at which they are exactly 10 distance units apart.
//
// 1)
// {0,0,0}
// {2,2,0}
// {9,0,5}
// {-2,2,0}
// 5
//
// Returns: "YES"
//
// At time 2.25, aircraft 1 will be at {4.5, 4.5, 0} and aircraft 2 at {4.5, 4.5, 5}, exactly a distance of 5 units apart.
//
// 2)
// {0,0,0}
// {-2,2,0}
// {9,0,5}
// {2,2,0}
// 5
//
// Returns: "NO"
//
// The aircraft are flying away from each other here, so the distance always increases with time.
//
// 3)
// {-2838,-7940,-2936}
// {1,1,-2}
// {532,3850,9590}
// {1,0,-3}
// 3410
//
// Returns: "YES"
//
// The closest approach of the aircraft occurs at time 12,158
//
// 4)
// {-8509,9560,345}
// {-89,-33,62}
// {-5185,-1417,2846}
// {-58,24,26}
// 8344
//
// Returns: "YES"
//
// A near miss occurs between times 111 and 112
//
// 5)
// {-7163,-371,-2459}
// {-59,-41,-14}
// {-2398,-426,-5487}
// {-43,27,67}
// 5410
//
// Returns: "NO"
//
// The aircraft almost have a near miss between times 15 and 16, but stay just outside the threshold distance.
//
// 6)
// {1774,-4491,7810}
// {-12,19,-24}
// {2322,3793,9897}
// {-12,19,-24}
// 10000
//
// Returns: "YES"
//
// The aircraft are here flying with identical velocities, so the distance between them never changes. The distance at time 0 is lower than the threshold, so a near miss is already underway.
//
// 7)
// {3731,8537,5661}
// {-70,71,32}
// {8701,-1886,-5115}
// {28,-13,7}
// 9766
//
// Returns: "NO"
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
