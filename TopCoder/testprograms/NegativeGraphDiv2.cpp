#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define infinity (1 << 28)
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define SZ(v) (int)(v.size())
#define eps 10e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;

template <class T> T sqr(T a){return a * a;}    // square
template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}     //  n  to the power p
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}    // extract words or numbers from a line
template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}    // convert a number to string
template <class T> inline T Mod(T n,T m) {return (n%m+m)%m;}    // negative mod
template <class T> void print_all(T v) {for(int i = 0; i < v.size(); i++) cout << v[i] << ' ';};
template <class T> void print_all(T &v, int len) {for(int i = 0; i < len; i++) cout << v[i] << ' ';}     // prints all elements in a vector or array
template <class T> void print_pair(T v, int len) {for(int i = 0; i < len; i++) cout << v[i].first << ' ' << v[i].second << endl;} // prints pair vector
//LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}

#define MAX 51
/*************************************************HABIJABI ENDS HERE******************************************************/

class NegativeGraphDiv2 {
public:

    struct edge
    {
        LL node, cost;
        edge(){}
        edge(LL _node, LL _cost)
        {
            node = _node;
            cost = _cost;
        }
    };
    vector <edge> adj[MAX];
    LL dp[MAX][1001][2000];
    bool visited[MAX][1001][2000];
    int n;

    LL call(int node, int left, int depth)
    {
//        cout << node << ' ' << left << ' ' << depth << endl;
        if(depth >= 2000) return 0;
        if(left == 0)
            return node == n? 0 : (1LL << 60);
        if(node == n)
        {
            LL &ret = dp[node][left][depth];
            if(visited[node][left][depth]) return ret;
            visited[node][left][depth] = true;
            ret = 0;
            for(int i = 0; i < SZ(adj[node]); i++)
                ret = min(ret, min(call(adj[node][i].node, left, depth + 1) + adj[node][i].cost,
                                call(adj[node][i].node, left - 1, depth + 1) - adj[node][i].cost));
            return ret;
        }
        LL &ret = dp[node][left][depth];
        if(visited[node][left][depth]) return ret;
        visited[node][left][depth] = true;
        ret = (1LL << 60);
        for(int i = 0; i < SZ(adj[node]); i++)
        {
            ret = min(ret, min(call(adj[node][i].node, left, depth + 1)
            + adj[node][i].cost, call(adj[node][i].node, left - 1, depth + 1) - adj[node][i].cost));
        }
        return ret;
    }

	long long findMin(int N, vector <int> s, vector <int> t, vector <int> weight, int charges) {
	    int i;
	    n = N;
	    for(i = 0; i <= N; i++)
            adj[i].clear();
	    for(i = 0; i < SZ(s); i++)
            adj[s[i]].pb(edge(t[i], weight[i]));
        clr(visited, 0);
        return call(1, charges, 0);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, vector <int> p2, vector <int> p3, int p4, bool hasAnswer, long long p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}" << "," << p4;
	cout << "]" << endl;
	NegativeGraphDiv2 *obj;
	long long answer;
	obj = new NegativeGraphDiv2();
	clock_t startTime = clock();
	answer = obj->findMin(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	int p0;
	vector <int> p1;
	vector <int> p2;
	vector <int> p3;
	int p4;
	long long p5;

	// ----- test 0 -----
	disabled = false;
	p0 = 3;
	p1 = {1,1,2,2,3,3};
	p2 = {2,3,1,3,1,2};
	p3 = {1,5,1,10,1,1};
	p4 = 1;
	p5 = -9ll;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = 1;
	p1 = {1};
	p2 = {1};
	p3 = {100};
	p4 = 1000;
	p5 = -100000ll;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = 2;
	p1 = {1,1,2};
	p2 = {2,2,1};
	p3 = {6,1,4};
	p4 = 2;
	p5 = -9ll;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = 2;
	p1 = {1};
	p2 = {2};
	p3 = {98765};
	p4 = 100;
	p5 = -98765ll;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// Nancy has a directed graph with N vertices and E edges.
// The vertices are numbered 1 through N.
// Each edge of the graph has a positive integer weight.
// This graph is described by three vector <int>s with E elements each: s, t, and weight.
// For each valid i, the graph contains an edge from s[i] to t[i], and its weight is weight[i].
// Note that Nancy's graph may contain multiple edges with the same start and end.
// It may also contain self-loops.
//
//
//
// Nancy is currently standing in the vertex 1.
// She can reach other vertices by moving along the edges.
// The cost of using an edge is equal to its weight.
// Nancy's goal is to reach the vertex N and to minimize the total cost of doing so.
//
//
//
// Nancy has a special power she can use to make her travels cheaper.
// Whenever she traverses an edge, she can use that special power to make the weight of that edge temporarily negative.
// You are given an int charges: the number of times Nancy can use her special power.
// Each use of the special power only works for one traversal of an edge.
// Nancy can traverse each edge arbitrarily many times.
// Each time she traverses an edge, she may use her special power, if she still has some charges left.
//
//
//
// Compute and return the minimal total cost of Nancy's journey.
//
//
// DEFINITION
// Class:NegativeGraphDiv2
// Method:findMin
// Parameters:int, vector <int>, vector <int>, vector <int>, int
// Returns:long long
// Method signature:long long findMin(int N, vector <int> s, vector <int> t, vector <int> weight, int charges)
//
//
// CONSTRAINTS
// -N will be between 1 and 50, inclusive.
// -E will be between 1 and 2500, inclusive.
// -s, t, weight will each contain exactly E elements.
// -s and t will only contain numbers between 1 and N, inclusive.
// -There will be a path from node 1 to node N.
// -weight will contain numbers between 0 and 100,000, inclusive.
// -charges will be between 0 and 1,000, inclusive.
//
//
// EXAMPLES
//
// 0)
// 3
// {1,1,2,2,3,3}
// {2,3,1,3,1,2}
// {1,5,1,10,1,1}
// 1
//
// Returns: -9
//
// The optimal path for Nancy is 1->2->3, and using her single charge on the last edge.
//
// 1)
// 1
// {1}
// {1}
// {100}
// 1000
//
// Returns: -100000
//
// The graph may contain self-loops. Here, the optimal solution is that Nancy uses the self-loop 1,000 times, each time using her special power to change its cost from 100 to -100.
//
// 2)
// 2
// {1,1,2}
// {2,2,1}
// {6,1,4}
// 2
//
// Returns: -9
//
// There can be multiple edges between vertices.
//
// 3)
// 2
// {1}
// {2}
// {98765}
// 100
//
// Returns: -98765
//
// Nancy may not be able to use all her charges.
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
