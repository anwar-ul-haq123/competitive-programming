#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define infinity (1 << 28)
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define SZ(v) (int)(v.size())
#define eps 10e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;

template <class T> T sqr(T a){return a * a;}    // square
template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}     //  n  to the power p
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}    // extract words or numbers from a line
template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}    // convert a number to string
template <class T> inline T Mod(T n,T m) {return (n%m+m)%m;}    // negative mod
template <class T> void print_all(T v) {for(int i = 0; i < v.size(); i++) cout << v[i] << ' ';};
template <class T> void print_all(T &v, int len) {for(int i = 0; i < len; i++) cout << v[i] << ' ';}     // prints all elements in a vector or array
template <class T> void print_pair(T v, int len) {for(int i = 0; i < len; i++) cout << v[i].first << ' ' << v[i].second << endl;} // prints pair vector
//LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}

#define MAX 100010
/*************************************************HABIJABI ENDS HERE******************************************************/

class VocaloidsAndSongs {
public:
    const LL mod = 1000000007;
    LL dp[55][55][55][55];
    LL call(int g, int i, int m, int done)
    {
        if(!g && !i && !m)
            return done == 0;
        if(!done)
            return 0;
        LL &ret = dp[g][i][m][done];
        if(ret != -1)
            return ret;
        ret = 0;
        if(g)
        ret += call(g - 1, i, m, done - 1);
        ret %= mod;
        if(i)
        ret += call(g, i - 1, m, done - 1);
        ret %= mod;
        if(m)
        ret += call(g, i, m - 1, done - 1);
        ret %= mod;
        if(g && i)
        ret += call(g - 1, i - 1, m, done - 1);
        ret %= mod;
        if(g && m)
        ret += call(g - 1, i, m - 1, done - 1);
        ret %= mod;
        if(i && m)
        ret += call(g, i - 1, m - 1, done - 1);
        ret %= mod;
        if(g && i && m)
        ret += call(g - 1, i - 1, m - 1, done - 1);
        ret %= mod;
        return ret;
    }
	int count(int S, int gumi, int ia, int mayu) {
        clr(dp, -1);
        return call(gumi, ia, mayu, S) % mod;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	VocaloidsAndSongs *obj;
	int answer;
	obj = new VocaloidsAndSongs();
	clock_t startTime = clock();
	answer = obj->count(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	int p0;
	int p1;
	int p2;
	int p3;
	int p4;

	// ----- test 0 -----
	disabled = false;
	p0 = 3;
	p1 = 1;
	p2 = 1;
	p3 = 1;
	p4 = 6;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = 3;
	p1 = 3;
	p2 = 1;
	p3 = 1;
	p4 = 9;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = 50;
	p1 = 10;
	p2 = 10;
	p3 = 10;
	p4 = 0;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = 18;
	p1 = 12;
	p2 = 8;
	p3 = 9;
	p4 = 81451692;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = 50;
	p1 = 25;
	p2 = 25;
	p3 = 25;
	p4 = 198591037;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Vocaloids Gumi, Ia, and Mayu love singing.
// They decided to make an album composed of S songs.
// Each of the S songs must be sung by at least one of the three Vocaloids.
// It is allowed for some songs to be sung by any two, or even all three Vocaloids at the same time.
// The number of songs sang by Gumi, Ia, and Mayu must be gumi, ia, and mayu, respectively.
//
// They soon realized that there are many ways of making the album.
// Two albums are considered different if there is a song that is sung by a different set of Vocaloids.
// Let X be the number of possible albums.
// Since the number X can be quite large, compute and return the number (X modulo 1,000,000,007).
//
// DEFINITION
// Class:VocaloidsAndSongs
// Method:count
// Parameters:int, int, int, int
// Returns:int
// Method signature:int count(int S, int gumi, int ia, int mayu)
//
//
// CONSTRAINTS
// -S will be between 1 and 50, inclusive.
// -gumi, ia and mayu will be each between 1 and S, inclusive.
//
//
// EXAMPLES
//
// 0)
// 3
// 1
// 1
// 1
//
// Returns: 6
//
// In this case, there are 3 songs on the album. And Gumi, Ia, Mayu will each sing one song.
// There are 3*2*1 = 6 ways how to choose which Vocaloid sings which song.
//
// 1)
// 3
// 3
// 1
// 1
//
// Returns: 9
//
// Gumi will sing all three songs. Ia and Mayu can each choose which one song they want to sing.
//
// 2)
// 50
// 10
// 10
// 10
//
// Returns: 0
//
// It is not possible to record 50 songs if each Vocaloid can only sing 10 of them.
//
// 3)
// 18
// 12
// 8
// 9
//
// Returns: 81451692
//
//
//
// 4)
// 50
// 25
// 25
// 25
//
// Returns: 198591037
//
//
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
