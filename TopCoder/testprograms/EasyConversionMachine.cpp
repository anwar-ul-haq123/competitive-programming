#include <bits/stdc++.h>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define infinity 2147483647
#define LL long long
#define Pi acos(-1)
#define SZ 100010
#define VI vector <int>

#define _ ios_base::sync_with_stdio(0);cin.tie(0);

///int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
///int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
///int col[4] = {1, 0, -1, 0};
///int row[4] = {0, 1, 0, -1};
///int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

struct point{int x, y;};

template <class T> T sqr(T a){return a * a;};
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}
template <class T> T GCD(T a, T b) {if(b == 0) return a; return GCD(b, a % b);}
template <class T> T LCM(T a, T b) {return (a * b) / GCD(a, b);}

using namespace std;


class EasyConversionMachine {
public:
	string isItPossible(string originalWord, string finalWord, int k) {
	_
	int tot = 0;
//	sort(originalWord.begin(), originalWord.end());
//	sort(finalWord.begin(), finalWord.end());
		for(int i = 0; i < originalWord.size(); i++)
        {
            if(originalWord[i] != finalWord[i])
                tot++;
        }
        cout << tot << endl;
        if(tot > k)
            return "IMPOSSIBLE";
        else if((k - tot) % 2)
            return "IMPOSSIBLE";
        return "POSSIBLE";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, string p1, int p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"" << "," << p2;
	cout << "]" << endl;
	EasyConversionMachine *obj;
	string answer;
	obj = new EasyConversionMachine();
	clock_t startTime = clock();
	answer = obj->isItPossible(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	string p1;
	int p2;
	string p3;

	{
	// ----- test 0 -----
	p0 = "babbabbababaabbaabbaaabaabba";
	p1 = "bbbaaabababbaaaababbaabbbbab";
	p2 = 7;
	p3 = "IMPOSSIBLE";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "aabb";
	p1 = "aabb";
	p2 = 1;
	p3 = "IMPOSSIBLE";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "aaaaabaa";
	p1 = "bbbbbabb";
	p2 = 8;
	p3 = "POSSIBLE";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "aaa";
	p1 = "bab";
	p2 = 4;
	p3 = "POSSIBLE";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = "aababbabaa";
	p1 = "abbbbaabab";
	p2 = 9;
	p3 = "IMPOSSIBLE";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// We have a string originalWord. Each character of originalWord is either 'a' or 'b'. Timmy claims that he can convert it to finalWord using exactly k moves. In each move, he can either change a single 'a' to a 'b', or change a single 'b' to an 'a'.
//
// You are given the strings originalWord and finalWord, and the int k. Determine whether Timmy may be telling the truth.
// If there is a possible sequence of exactly k moves that will turn originalWord into finalWord, return "POSSIBLE" (quotes for clarity).
// Otherwise, return "IMPOSSIBLE".
//
// DEFINITION
// Class:EasyConversionMachine
// Method:isItPossible
// Parameters:string, string, int
// Returns:string
// Method signature:string isItPossible(string originalWord, string finalWord, int k)
//
//
// NOTES
// -Timmy may change the same letter multiple times. Each time counts as a different move.
//
//
// CONSTRAINTS
// -originalWord will contain between 1 and 50 characters, inclusive.
// -finalWord and originalWord will contain the same number of characters.
// -Each character in originalWord and finalWord will be 'a' or 'b'.
// -k will be between 1 and 100, inclusive.
//
//
// EXAMPLES
//
// 0)
// "aababba"
// "bbbbbbb"
// 2
//
// Returns: "IMPOSSIBLE"
//
// It is not possible to reach finalWord in fewer than 4 moves.
//
// 1)
// "aabb"
// "aabb"
// 1
//
// Returns: "IMPOSSIBLE"
//
// The number of moves must be exactly k=1.
//
// 2)
// "aaaaabaa"
// "bbbbbabb"
// 8
//
// Returns: "POSSIBLE"
//
// Use each move to change each of the letters once.
//
// 3)
// "aaa"
// "bab"
// 4
//
// Returns: "POSSIBLE"
//
// The following sequence of 4 moves does the job:
// aaa -> baa -> bab -> aab -> bab
//
// 4)
// "aababbabaa"
// "abbbbaabab"
// 9
//
// Returns: "IMPOSSIBLE"
//
//
//
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
