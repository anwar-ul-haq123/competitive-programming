#include <bits/stdc++.h>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pub push_back
#define pob pop_back
#define infinity 2147483647
#define LL long long
#define Pi acos(-1)
#define SZ 100010
#define VI vector <int>
#define all(v) v.begin(), v.end()

#define _ ios_base::sync_with_stdio(0);cin.tie(0);

///int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
///int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
///int col[4] = {1, 0, -1, 0};
///int row[4] = {0, 1, 0, -1};
///int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y;};

template <class T> T sqr(T a){return a * a;};
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}
template <class T> T GCD(T a, T b) {if(b == 0) return a; return GCD(b, a % b);}
template <class T> T LCM(T a, T b) {return (a * b) / GCD(a, b);}
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}
template <class T> string tostr(T n) {stringstream ss; ss << n; return ss.str();}

class AuctionHouse {
public:
	vector <string> getList(vector <string> bids) {
		_
		map <string, int> product_to_number;
		map <int, string> number_to_product;
		vector < pair <string, int> > V[55];
		vector <string> ans;
		int mc = -1;
		to_string
		for(int i = 0; i < bids.size(); i++){
            stringstream ss(bids[i]);
            string name, item;
            int bid;
            ss >> name;
            ss >> item;
            ss >> bid;
            if(product_to_number.find(item) == product_to_number.end()){
                    product_to_number[item] = ++mc;
                    number_to_product[mc] = item;
            }
            V[product_to_number[item]].pub(make_pair(name, bid));
		}
		for(int i = 0; i <= mc; i++){
		    string winner, tem;
		    int mxbid = -1;
                for(int j = 0; j < V[i].size() ; j++){
                    if(V[i][j].second > mxbid){
                        winner = V[i][j].first;
                        mxbid = V[i][j].second;
                    }
                }
                tem += winner + " got " + number_to_product[i];
                ans.pub(tem);
		}
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <string> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	AuctionHouse *obj;
	vector <string> answer;
	obj = new AuctionHouse();
	clock_t startTime = clock();
	answer = obj->getList(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p1[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	vector <string> p1;

	{
	// ----- test 0 -----
	string t0[] = {"harry golfset 1000","william necklace 4000","christopher golfset 1500"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"christopher got golfset","william got necklace"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0.clear() /*{}*/;
	p1.clear() /*{}*/;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"wilson racket 1000"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"wilson got racket"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"tom golfset 1000","yana golfset 1100","tom golfset 1200"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"tom got golfset"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	string t0[] = {"ron radio 100","amanda book 50","ron book 200","ron radio 300","aamir radio 300"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"ron got radio","ron got book"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	string t0[] = {"kerry gamecd 100","kent gamecd 100"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"kerry got gamecd"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You run an auction house and you have to process the day's bids for a silent auction.  In a silent auction, each person makes his bid in secret, and the highest bidder for each item wins that item.  If there are multiple highest bids for an item, the earliest among them will be the winner.  You are given a vector <string> bids containing the day's bids in chronological order.  Each element is formatted as "[name of bidder] [item] [amount bid]" (quotes and brackets for clarity).
//
// Return a vector <string> containing the winners of all the items.  Each element should be formatted as "[name of bidder] got [item]" (quotes and brackets for clarity).  Items should appear in the same order as they first appeared in bids.  For example, if bids is {"Ron radio 100", "Amanda book 50", "Ron book 200", "Ron radio 300", "Aamir radio 300"}, Ron will win both the radio and the book.  Since "radio" first appears in bids earlier than "book", the return vector <string> should be ordered {"Ron got radio", "Ron got book"}.
//
// DEFINITION
// Class:AuctionHouse
// Method:getList
// Parameters:vector <string>
// Returns:vector <string>
// Method signature:vector <string> getList(vector <string> bids)
//
//
// CONSTRAINTS
// -bids will contain between 0 and 50 elements, inclusive.
// -Each element of bids will be formatted as "[name of bidder] [item] [amount bid]" (quotes and brackets for clarity).
// -Each element of bids will contain between 5 and 50 characters, inclusive.
// -Each [name of bidder] will contain between 1 and 46 lowercase letters ('a'-'z'), inclusive.
// -Each [item] will contain between 1 and 46 letters ('a'-'z'), inclusive.
// -Each [amount bid] will be an integer between 0 and 1000000, inclusive, with no extra leading zeroes.
//
//
// EXAMPLES
//
// 0)
// {"harry golfset 1000","william necklace 4000","christopher golfset 1500"}
//
// Returns: {"christopher got golfset", "william got necklace" }
//
// Only william bid on the necklace, and he got it for 4000.  Both harry and christopher bid on the golfset, but since christopher had the higher bid, he got it for 1500.
//
// 1)
// {}
//
// Returns: { }
//
// No bids.
//
// 2)
// {"wilson racket 1000"}
//
// Returns: {"wilson got racket" }
//
//
//
// 3)
// {"tom golfset 1000","yana golfset 1100","tom golfset 1200"}
//
// Returns: {"tom got golfset" }
//
// A person can bid more than once on the same item.
//
// 4)
// {"ron radio 100","amanda book 50","ron book 200","ron radio 300","aamir radio 300"}
//
// Returns: {"ron got radio", "ron got book" }
//
// The example given in the statement.
//
// 5)
// {"kerry gamecd 100","kent gamecd 100"}
//
// Returns: {"kerry got gamecd" }
//
// kerry's bid appears earlier in bids and hence has priority over later bids of the same amount such as kent's bid.
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
