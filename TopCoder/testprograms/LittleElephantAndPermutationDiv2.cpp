#include <bits/stdc++.h>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define infinity 2147483647
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define _ ios_base::sync_with_stdio(0);cin.tie(0);

#define F(i, n) for(i = 0; i < n; i++)

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;

template <class T> T sqr(T a){return a * a;}    // square
template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}     //  n  to the power p
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}    // extract words or numbers from a line
template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str;}    // convert a number to string
template <class T> inline T Mod(T n,T m) {return (n%m+m)%m;}    // negative mod
template <class T> void print_all(T v) {for(int i = 0; i < v.size(); i++) cout << v[i] << ' ';};
template <class T> void print_all(T &v, int len) {for(int i = 0; i < len; i++) cout << v[i] << ' ';}     // prints all elements in a vector or array
template <class T> void print_pair(T v, int len) {for(int i = 0; i < len; i++) cout << v[i].first << ' ' << v[i].second << endl;} // prints pair vector
//LL bigmod(LL B,LL P,LL M){  LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}

#define SZ 110
/*************************************************HABIJABI ENDS HERE******************************************************/

LL dp[12];

LL fact(LL n)
{
    if(n <= 1)
        return dp[n] = 1;
    if(dp[n] != -1)
        return dp[n];
    return dp[n] = n * fact(n - 1);
}

class LittleElephantAndPermutationDiv2 {
public:
	long long getNumber(int N, int K) {

	_
	clr(dp, -1);
	vector <LL> v;
	LL i, cnt = 0;
    fact(10);
	for(i = 1; i <= N; i++)
        v.pb(i);
    do
    {
        LL sum = 0;
        for(i = 1; i <= N; i++)
            sum += max(v[i - 1], i);
        if(sum >= K)
        {
            cnt++;
        }
    }while(next_permutation(v.begin(), v.end()));
    return cnt * dp[N];
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	LittleElephantAndPermutationDiv2 *obj;
	long long answer;
	obj = new LittleElephantAndPermutationDiv2();
	clock_t startTime = clock();
	answer = obj->getNumber(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	long long p2;

	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 1;
	p2 = 1ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 1;
	p2 = 4ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 3;
	p1 = 8;
	p2 = 18ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 10;
	p1 = 47;
	p2 = 13168189440000ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// This problem statement contains superscripts and/or subscripts. These may not display properly outside the applet.
//
//
//
//
// Little Elephant from the Zoo of Lviv likes permutations.
// A permutation of size N is a sequence (a1, ..., aN) that contains each of the numbers from 1 to N exactly once.
// For example, (3,1,4,5,2) is a permutation of size 5.
//
//
//
//
// Given two permutations A = (a1, ..., aN) and B = (b1, ..., bN), the value magic(A,B) is defined as follows:
// magic(A,B) = max(a1,b1) + max(a2,b2) + ... + max(aN,bN).
//
//
//
//
// You are given the int N.
// You are also given another int K.
// Return the number of pairs (A,B) such that both A and B are permutations of size N, and magic(A,B) is greater than or equal to K.
// (Note that A and B are not required to be distinct.)
//
//
// DEFINITION
// Class:LittleElephantAndPermutationDiv2
// Method:getNumber
// Parameters:int, int
// Returns:long long
// Method signature:long long getNumber(int N, int K)
//
//
// CONSTRAINTS
// -N will be between 1 and 10, inclusive.
// -K will be between 1 and 100, inclusive.
//
//
// EXAMPLES
//
// 0)
// 1
// 1
//
// Returns: 1
//
// For N=1 the only pair of permutations is ( (1), (1) ).
// The magic of this pair of permutations is 1, so we count it.
//
// 1)
// 2
// 1
//
// Returns: 4
//
// Now there are four possible pairs of permutations. They are shown below, along with their magic value.
//
// magic( (1,2), (1,2) ) = 1+2 = 3
// magic( (1,2), (2,1) ) = 2+2 = 4
// magic( (2,1), (1,2) ) = 2+2 = 4
// magic( (2,1), (2,1) ) = 2+1 = 3
//
// In all four cases the magic value is greater than or equal to K.
//
// 2)
// 3
// 8
//
// Returns: 18
//
// When A = (1,2,3), there are 3 possibilities for B: (2,3,1), (3,1,2) and (3,2,1). For each of the other 5 values of A, it can be shown that there are 3 possibilities for B as well. Therefore the answer is 3*6 = 18.
//
// 3)
// 10
// 47
//
// Returns: 13168189440000
//
//
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
