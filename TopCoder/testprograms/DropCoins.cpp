#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define infinity (1 << 28)
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define SZ(v) (int)(v.size())
#define eps 10e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;

template <class T> T sqr(T a){return a * a;}    // square
template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}     //  n  to the power p
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}    // extract words or numbers from a line
template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}    // convert a number to string
template <class T> inline T Mod(T n,T m) {return (n%m+m)%m;}    // negative mod
template <class T> void print_all(T v) {for(int i = 0; i < v.size(); i++) cout << v[i] << ' ';};
template <class T> void print_all(T &v, int len) {for(int i = 0; i < len; i++) cout << v[i] << ' ';}     // prints all elements in a vector or array
template <class T> void print_pair(T v, int len) {for(int i = 0; i < len; i++) cout << v[i].first << ' ' << v[i].second << endl;} // prints pair vector
//LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}

#define MAX 31
/*************************************************HABIJABI ENDS HERE******************************************************/

class DropCoins {
public:
	int getMinimum(vector <string> board, int K) {
        int i, j, k, l, m, n, ret = infinity;
        for(i = 0; i < SZ(board); i++)
        {
            for(j = i; j < SZ(board); j++)
            {
                for(k = 0; k < SZ(board[0]); k++)
                {
                    for(l = k; l < SZ(board[0]); l++)
                    {
                        int cnt = 0;
                        for(m = i; m <= j; m++)
                        {
                            for(n = k; n <= l; n++)
                                cnt += board[m][n] == 'o';
                        }
                        if(cnt != K)
                            continue;
                        ret = min(ret, i + SZ(board) - j - 1 + k + SZ(board[0]) - l - 1 +
                                  min(i, SZ(board) - j - 1) + min(k, SZ(board[0]) - l - 1));
                    }
                }
            }
        }
        return ret == infinity? -1 : ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	DropCoins *obj;
	int answer;
	obj = new DropCoins();
	clock_t startTime = clock();
	answer = obj->getMinimum(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	vector <string> p0;
	int p1;
	int p2;

	// ----- test 0 -----
	disabled = false;
	p0 = {".o..","oooo","..o."};
	p1 = 3;
	p2 = 2;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = {".....o","......","oooooo","oooooo","......","o....."};
	p1 = 12;
	p2 = 3;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = {"....",".oo.",".oo.","...."};
	p1 = 3;
	p2 = -1;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = {".......","..ooo..","ooooooo",".oo.oo.","oo...oo"};
	p1 = 12;
	p2 = 4;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = {".................",".ooooooo...oooo..",".ooooooo..oooooo.",".oo.......oo..oo.",".oo.......oo..oo.",".ooooo.....oooo..",".ooooooo...oooo..",".....ooo..oo..oo.","......oo..oo..oo.",".ooooooo..oooooo.",".oooooo....oooo..","................."};
	p1 = 58;
	p2 = 6;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// There is a rectangle divided into 1x1 cells. Each cell is either empty or it contains a single coin.
//
// You can apply the following operation repeatedly.
//
// First, choose one of the directions: up, down, left, or right.
// Then, move all coins in the chosen direction by exactly 1 cell. If this would cause a coin to move out of the rectangle, the coin drops out from the rectangle and disappears.
//
// Your objective in this problem is to apply the operations so that the number of coins remaining on the rectangle becomes exactly K.
//
// You are given the int K and a vector <string> board that describes the initial state of the rectangle. More precisely, character j of element i of board is 'o' if i-th row of j-th column of the rectangle contains a coin, and it is '.' otherwise.
//
// Return the minimum number of operations you have to perform. If the objective is impossible, return -1.
//
// DEFINITION
// Class:DropCoins
// Method:getMinimum
// Parameters:vector <string>, int
// Returns:int
// Method signature:int getMinimum(vector <string> board, int K)
//
//
// CONSTRAINTS
// -board will contain between 1 and 30 elements, inclusive.
// -Each element of board will contain between 1 and 30 characters, inclusive.
// -All elements of board will contain the same number of characters.
// -Each character in each element of board will be either '.' or 'o'.
// -K will be between 1 and 900, inclusive.
//
//
// EXAMPLES
//
// 0)
// {".o.."
// ,"oooo"
// ,"..o."}
//
// 3
//
// Returns: 2
//
// One of the optimal solutions is to move coins to the right twice.
//
// 1)
// {".....o"
// ,"......"
// ,"oooooo"
// ,"oooooo"
// ,"......"
// ,"o....."}
//
// 12
//
// Returns: 3
//
// One of the optimal solutions:
//
// move coins up (1 coin drops, 13 remain)
// move coins down
// move coins down again (1 coin drops, 12 remain)
//
//
// 2)
// {"...."
// ,".oo."
// ,".oo."
// ,"...."}
//
// 3
//
// Returns: -1
//
// It is impossible to make the number of remaining coins exactly 3.
//
// 3)
// {"......."
// ,"..ooo.."
// ,"ooooooo"
// ,".oo.oo."
// ,"oo...oo"}
//
// 12
//
// Returns: 4
//
//
//
// 4)
// {"................."
// ,".ooooooo...oooo.."
// ,".ooooooo..oooooo."
// ,".oo.......oo..oo."
// ,".oo.......oo..oo."
// ,".ooooo.....oooo.."
// ,".ooooooo...oooo.."
// ,".....ooo..oo..oo."
// ,"......oo..oo..oo."
// ,".ooooooo..oooooo."
// ,".oooooo....oooo.."
// ,"................."}
//
// 58
//
// Returns: 6
//
//
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
