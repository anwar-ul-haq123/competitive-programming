#include <bits/stdc++.h>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pub push_back
#define pob pop_back
#define infinity 2147483647
#define LL long long
#define Pi acos(-1)
#define SZ 100010
#define VI vector <int>
#define all(v) v.begin(), v.end()

#define _ ios_base::sync_with_stdio(0);cin.tie(0);

///int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
///int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
///int col[4] = {1, 0, -1, 0};
///int row[4] = {0, 1, 0, -1};
///int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y;};

template <class T> T sqr(T a){return a * a;};
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}
template <class T> T GCD(T a, T b) {if(b == 0) return a; return GCD(b, a % b);}
template <class T> T LCM(T a, T b) {return (a * b) / GCD(a, b);}
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}
template <class T> string tostr(T n) {stringstream ss; ss << n; return ss.str();}

class TxMsg {
public:
    bool isvowel(char c){
        if(c == 'a' || c == 'e' || c == 'i' || c  == 'o' || c == 'u')
            return true;
        return false;
    }
	string getMessage(string original) {
	_
	int i;
	string ret, word, tem;
    stringstream ss(original);
    while(ss >> word){
        for(i = 0; i < word.size(); i++)
            if(!isvowel(word[i]))
                break;
        if(i == word.size()){
                ret += word + " ";
                continue;
        }
        for(i = 0; i < word.size(); i++){
            if(isvowel(word[i]))
                continue;
            if(i > 0)
                if(!isvowel(word[i - 1]))
                    continue;
            tem += word[i];
        }
        ret += tem + " ";
        tem.clear();
        }
    ret.resize(ret.size() - 1);
    return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	TxMsg *obj;
	string answer;
	obj = new TxMsg();
	clock_t startTime = clock();
	answer = obj->getMessage(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	string p1;

	{
	// ----- test 0 -----
	p0 = "text message";
	p1 = "tx msg";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "ps i love u";
	p1 = "p i lv u";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "please please me";
	p1 = "ps ps m";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "back to the ussr";
	p1 = "bc t t s";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = "aeiou bcdfghjklmnpqrstvwxyz";
	p1 = "aeiou b";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// Strange abbreviations are often used to write text messages on uncomfortable mobile devices.  One particular strategy for encoding texts composed of alphabetic characters and spaces is the following:
//
// Spaces are maintained, and each word is encoded individually. A word is a consecutive string of alphabetic characters.
// If the word is composed only of vowels, it is written exactly as in the original message.
// If the word has at least one consonant, write only the consonants that do not have another consonant immediately before them.  Do not write any vowels.
// The letters considered vowels in these rules are 'a', 'e', 'i', 'o' and 'u'. All other letters are considered consonants.
//
// For instance, "ps i love u" would be abbreviated as "p i lv u" while "please please me" would be abbreviated as "ps ps m".
//
// You will be given the original message in the string original. Return a string with the message abbreviated using the described strategy.
//
//
// DEFINITION
// Class:TxMsg
// Method:getMessage
// Parameters:string
// Returns:string
// Method signature:string getMessage(string original)
//
//
// CONSTRAINTS
// -original will contain between 1 and 50 characters, inclusive.
// -Each character of original will be a lowercase letter ('a'-'z'), or a space.
// -There will not be two consecutive spaces in original, nor will the first or last character be a space.
//
//
// EXAMPLES
//
// 0)
// "text message"
//
// Returns: "tx msg"
//
//
//
// 1)
// "ps i love u"
//
// Returns: "p i lv u"
//
// First example from the problem statement.
//
// 2)
// "please please me"
//
// Returns: "ps ps m"
//
// Second example from the problem statement.
//
// 3)
// "back to the ussr"
//
// Returns: "bc t t s"
//
//
//
// 4)
// "aeiou bcdfghjklmnpqrstvwxyz"
//
// Returns: "aeiou b"
//
//
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
