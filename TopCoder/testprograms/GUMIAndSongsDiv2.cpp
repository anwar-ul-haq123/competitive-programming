#include <bits/stdc++.h>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define pob pop_back
#define infinity 100000000
#define LL long long
#define Pi acos(-1)
#define SZ 100010
#define VI vector <int>
#define all(v) v.begin(), v.end()

#define _ ios_base::sync_with_stdio(0);cin.tie(0);

///int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
///int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
///int col[4] = {1, 0, -1, 0};
///int row[4] = {0, 1, 0, -1};
///int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y;};

template <class T> T sqr(T a){return a * a;};
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}
template <class T> T GCD(T a, T b) {if(b == 0) return a; return GCD(b, a % b);}
template <class T> T LCM(T a, T b) {return (a * b) / GCD(a, b);}
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}
template <class T> string tostr(T n) {stringstream ss; ss << n; return ss.str();}

    struct song
    {
        int dur;
        int tone;
    };

    bool comp(const song &a, const song &b)
    {
        if(a.tone != b.tone)
            return a.tone < b.tone;
        return a.dur < b.dur;
    }

class GUMIAndSongsDiv2 {
public:
	int maxSongs(vector <int> duration, vector <int> tone, int T) {
	_
	int limit = 1 << tone.size(), i, ret = 0, mask;
	vector <song> tem;
	for(mask = 1; mask < limit; mask++)
    {
        int tot_time = 0;
        tem.clear();
        for(i = 0; i < tone.size(); i++)
        {
            if(mask & (1 << i))
            {
                song s;
                s.dur = duration[i], s.tone = tone[i];
                tem.pb(s);
            }
        }
        sort(all(tem), comp);
        tot_time = tem[0].dur;
        for(i = 1; i < tem.size(); i++)
            tot_time += tem[i].tone - tem[i - 1].tone + tem[i].dur;
        if(tot_time <= T)
            ret = max(ret, (int) tem.size());
    }
    return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	GUMIAndSongsDiv2 *obj;
	int answer;
	obj = new GUMIAndSongsDiv2();
	clock_t startTime = clock();
	answer = obj->maxSongs(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	vector <int> p1;
	int p2;
	int p3;

	{
	// ----- test 0 -----
	int t0[] = {3,5,4,11};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,1,3,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 17;
	p3 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {100,200,300};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 10;
	p3 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {1,2,3,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,1,1,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 100;
	p3 = 4;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {10,10,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {58,58,58};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 30;
	p3 = 3;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	int t0[] = {8,11,7,15,9,16,7,9};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {3,8,5,4,2,7,4,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 14;
	p3 = 1;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	int t0[] = {5611,39996,20200,56574,81643,90131,33486,99568,48112,97168,5600,49145,73590,3979,94614};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2916,53353,64924,86481,44803,61254,99393,5993,40781,2174,67458,74263,69710,40044,80853};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 302606;
	p3 = 8;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Gumi loves singing.
// She knows N songs.
// The songs are numbered 0 through N-1.
// She now has some time and she would love to sing as many different songs as possible.
//
// You are given a vector <int> duration.
// For each i, duration[i] is the duration of song i in Gumi's time units.
//
// Gumi finds it difficult to sing songs with quite different tones consecutively.
// You are given a vector <int> tone with the following meaning:
// If Gumi wants to sing song y immediately after song x, she will need to spend |tone[x]-tone[y]| units of time resting between the two songs.
// (Here, || denotes absolute value.)
//
// You are also given an int T.
// Gumi has T units of time for singing.
// She can start singing any song she knows immediately at the beginning of this time interval.
// Compute the maximal number of different songs she can sing completely within the given time.
//
// DEFINITION
// Class:GUMIAndSongsDiv2
// Method:maxSongs
// Parameters:vector <int>, vector <int>, int
// Returns:int
// Method signature:int maxSongs(vector <int> duration, vector <int> tone, int T)
//
//
// CONSTRAINTS
// -duration and tone will each contain between 1 and 15 elements, inclusive.
// -duration and tone will contain the same number of elements.
// -Each element of duration will be between 1 and 100,000, inclusive.
// -Each element of tone will be between 1 and 100,000, inclusive.
// -T will be between 1 and 10,000,000, inclusive.
//
//
// EXAMPLES
//
// 0)
// {3, 5, 4, 11}
// {2, 1, 3, 1}
// 17
//
// Returns: 3
//
// There are four songs.
// Two songs have tone 1 and their durations are 5 and 11, respectively.
// One song has tone 2 and its duration is 3.
// One song has tone 3 and its duration is 4.
// Gumi has 17 units of time to sing.
//
// It is impossible for Gumi to sing all four songs she knows within the given time: even without the breaks the total length of all songs exceeds 17.
//
// Here is one way how she can sing three songs:
// First, she sings song 0 in 3 units of time.
// Second, she waits for |2-3|=1 unit of time and then sings song 2 in 4 units of time.
// Finally, she waits for |3-1|=2 units of time and then sings song 1 in 5 units of time.
// The total time spent is 3+1+4+2+5 = 15 units of time.
//
//
// 1)
// {100, 200, 300}
// {1, 2, 3}
// 10
//
// Returns: 0
//
// In this case, T is so small that she can't sing at all.
//
// 2)
// {1, 2, 3, 4}
// {1, 1, 1, 1}
// 100
//
// Returns: 4
//
// There is plenty of time, so she can sing all 4 songs.
//
//
// 3)
// {10, 10, 10}
// {58, 58, 58}
// 30
//
// Returns: 3
//
//
//
// 4)
// {8, 11, 7, 15, 9, 16, 7, 9}
// {3, 8, 5, 4, 2, 7, 4, 1}
// 14
//
// Returns: 1
//
//
//
// 5)
// {5611,39996,20200,56574,81643,90131,33486,99568,48112,97168,5600,49145,73590,3979,94614}
// {2916,53353,64924,86481,44803,61254,99393,5993,40781,2174,67458,74263,69710,40044,80853}
// 302606
//
// Returns: 8
//
//
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
