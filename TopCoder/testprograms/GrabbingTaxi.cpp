#include <bits/stdc++.h>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pub push_back
#define pob pop_back
#define infinity 2147483647
#define LL long long
#define Pi acos(-1)
#define SZ 100010
#define VI vector <int>
#define all(v) v.begin(), v.end()

#define _ ios_base::sync_with_stdio(0);cin.tie(0);

///int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
///int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
///int col[4] = {1, 0, -1, 0};
///int row[4] = {0, 1, 0, -1};
///int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y;};

template <class T> T sqr(T a){return a * a;};
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}
template <class T> T GCD(T a, T b) {if(b == 0) return a; return GCD(b, a % b);}
template <class T> T LCM(T a, T b) {return (a * b) / GCD(a, b);}
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}
template <class T> string tostr(T n) {stringstream ss; ss << n; return ss.str();}


class GrabbingTaxi {
public:
	int minTime(vector <int> tXs, vector <int> tYs, int gX, int gY, int walkTime, int taxiTime) {
	_
		LL walk = abs(gX) + abs(gY);
		walk *= walkTime;
		LL taxitoO[60], metoTaxi[60];
		for(int i = 0; i < tXs.size(); i++){
            taxitoO[i] = abs(tXs[i] - gX) + abs(tYs[i] - gY);
            metoTaxi[i] = abs(tXs[i]) + abs(tYs[i]);
            walk = min(walk, taxitoO[i] * taxiTime + metoTaxi[i] * walkTime);
		}
	return walk;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, int p3, int p4, int p5, bool hasAnswer, int p6) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2 << "," << p3 << "," << p4 << "," << p5;
	cout << "]" << endl;
	GrabbingTaxi *obj;
	int answer;
	obj = new GrabbingTaxi();
	clock_t startTime = clock();
	answer = obj->minTime(p0, p1, p2, p3, p4, p5);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p6 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p6;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	vector <int> p1;
	int p2;
	int p3;
	int p4;
	int p5;
	int p6;

	{
	// ----- test 0 -----
	p0.clear() /*{}*/;
	p1.clear() /*{}*/;
	p2 = 3;
	p3 = 2;
	p4 = 10;
	p5 = 2;
	p6 = 50;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {-2,-2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,-2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = -4;
	p3 = -2;
	p4 = 15;
	p5 = 3;
	p6 = 42;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	p3 = 0;
	p4 = 10;
	p5 = 20;
	p6 = 50;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {34,-12,1,0,21,-43,-98,11,86,-31};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {11,5,-68,69,-78,-49,-36,-2,1,70};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = -97;
	p3 = -39;
	p4 = 47;
	p5 = 13;
	p6 = 2476;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	int t0[] = {82,-60,57,98,30,-67,84,-42,-100,62};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {-7,90,53,-56,-15,-87,22,-3,-61,-30};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 21;
	p3 = 15;
	p4 = 53;
	p5 = 2;
	p6 = 1908;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// You are walking in the city on a holiday. Suddenly, you are told to go to your office as soon as possible by your boss via cell phone. The city is infinite in size, with vertical streets located at every integer X value and horizontal streets located at every Y value. You are currently located at (0, 0) and your office is located at (gX, gY). There are some taxi stands in the city and their locations are (tXs[i], tYs[i]). You can either go to the office by foot or go to some taxi stand, get a taxi there and go to the office by taxi. It takes walkTime seconds to go along the street to proceed to a horizontally or vertically adjacent intersection by foot and it takes taxiTime seconds by a taxi.
//
//
// Return the least amount of time that it will take you to go to your office.
//
//
// DEFINITION
// Class:GrabbingTaxi
// Method:minTime
// Parameters:vector <int>, vector <int>, int, int, int, int
// Returns:int
// Method signature:int minTime(vector <int> tXs, vector <int> tYs, int gX, int gY, int walkTime, int taxiTime)
//
//
// CONSTRAINTS
// -tXs will contain between 0 and 50 elements, inclusive.
// -tXs and tYs will contain the same number of elements.
// -Each element of tXs and tYs will be between -10000 and 10000, inclusive.
// -gX and gY will be between -10000 and 10000, inclusive.
// -walkTime and taxiTime will be between 1 and 1000, inclusive.
//
//
// EXAMPLES
//
// 0)
// {}
// {}
// 3
// 2
// 10
// 2
//
// Returns: 50
//
// There are no taxi stands. You have to walk to the goal.
//
// 1)
// {-2, -2}
// {0, -2}
// -4
// -2
// 15
// 3
//
// Returns: 42
//
// First, you walk to (-2, 0) and get a taxi. Then you go to the goal by it.
//
// 2)
// {3}
// {0}
// 5
// 0
// 10
// 20
//
// Returns: 50
//
// taxiTime may be larger than walkTime.
//
// 3)
// {34, -12, 1, 0, 21, -43, -98, 11, 86, -31}
// {11, 5, -68, 69, -78, -49, -36, -2, 1, 70}
// -97
// -39
// 47
// 13
//
// Returns: 2476
//
//
//
// 4)
// {82, -60, 57, 98, 30, -67, 84, -42, -100, 62}
// {-7, 90, 53, -56, -15, -87, 22, -3, -61, -30}
// 21
// 15
// 53
// 2
//
// Returns: 1908
//
//
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
