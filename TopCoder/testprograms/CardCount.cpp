#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define infinity (1 << 28)
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define SZ(v) (int)(v.size())
#define eps 10e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;

template <class T> T sqr(T a){return a * a;}    // square
template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}     //  n  to the power p
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}    // extract words or numbers from a line
template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}    // convert a number to string
template <class T> inline T Mod(T n,T m) {return (n%m+m)%m;}    // negative mod
template <class T> void print_all(T v) {for(int i = 0; i < v.size(); i++) cout << v[i] << ' ';};
template <class T> void print_all(T &v, int len) {for(int i = 0; i < len; i++) cout << v[i] << ' ';}     // prints all elements in a vector or array
template <class T> void print_pair(T v, int len) {for(int i = 0; i < len; i++) cout << v[i].first << ' ' << v[i].second << endl;} // prints pair vector
//LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}

#define MAX 100010
/*************************************************HABIJABI ENDS HERE******************************************************/

class CardCount {
public:
	vector <string> dealHands(int numPlayers, string deck) {
		vector <string> ret(numPlayers, "");
		int i, j;
		for(i = 0; i <= SZ(deck) - numPlayers;)
		{
			for(j = 0; j < numPlayers; j++, i++)
                ret[j] += deck[i];
		}
		return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, string p1, bool hasAnswer, vector <string> p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	CardCount *obj;
	vector <string> answer;
	obj = new CardCount();
	clock_t startTime = clock();
	answer = obj->dealHands(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p2[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	int p0;
	string p1;
	vector <string> p2;

	// ----- test 0 -----
	disabled = false;
	p0 = 6;
	p1 = "012345012345012345";
	p2 = {"000","111","222","333","444","555"};
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = 4;
	p1 = "111122223333";
	p2 = {"123","123","123","123"};
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = 1;
	p1 = "012345012345012345";
	p2 = {"012345012345012345"};
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = 6;
	p1 = "01234";
	p2 = {"","","","","",""};
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = 2;
	p1 = "";
	p2 = {"",""};
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You are dealing cards to a group of players.  In this game, the cards are numbered 0-9 and have no distinguishing
// characteristics other than their numbers.  A given deck may have many cards that share the same number.  You are given an
// int numPlayers that represents the number of people playing.  You are also given a string
// deck which contains the cards to be used (0th character is the top of the deck, and the last character is the bottom).
//  You will deal the cards starting with player 0, then player 1, until you reach player numPlayers-1, dealing one card
// at a time.  Then you repeat this process until the cards are exhausted.  Cards are always dealt from the top of the deck.
//
// You will return a vector <string> that shows each of the players' cards in the order they were dealt (cards dealt
// earlier show up earlier in the particular string).  Player k's hand corresponds to element k of
// the returned vector <string>.  One added constraint is that each player must be dealt the same number of cards.  To  enforce this
// constraint you will not deal extra cards that will unbalance the players' hands (cards held).  In other words, if you have
// dealt to the last player, and don't have enough cards to deal another to every player, stop dealing.  The returned vector <string> must contain exactly numPlayers elements, each element containing exactly the same number of characters.
//
// DEFINITION
// Class:CardCount
// Method:dealHands
// Parameters:int, string
// Returns:vector <string>
// Method signature:vector <string> dealHands(int numPlayers, string deck)
//
//
// CONSTRAINTS
// -numPlayers will be between 1 and 50 inclusive
// -deck will contain between 0 and 50 characters inclusive, all of which are numeric (0-9)
//
//
// EXAMPLES
//
// 0)
// 6
// "012345012345012345"
//
// Returns: { "000",  "111",  "222",  "333",  "444",  "555" }
//
// Exactly enough to deal 3 to each player.
//
// 1)
// 4
// "111122223333"
//
// Returns: { "123",  "123",  "123",  "123" }
//
// 2)
// 1
// "012345012345012345"
//
// Returns: { "012345012345012345" }
//
// Only a single player.
//
// 3)
// 6
// "01234"
//
// Returns: { "",  "",  "",  "",  "",  "" }
//
// Not enough cards to deal 1 to each player.
//
// 4)
// 2
// ""
//
// Returns: { "",  "" }
//
// No cards.
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
