#include <bits/stdc++.h>

#define in freopen("input.txt", "r", stdin);
#define out freopen("output.txt", "w", stdout);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define mp(a, b) make_pair(a, b)
#define infinity (1 << 28)
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define CF ios_base::sync_with_stdio(0);cin.tie(0);
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define SZ(v) (int)(v.size())
#define eps 10e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;

//template <class T> T sqr(T a){return a * a;}    // square
//template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}     //  n  to the power p
//template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
//template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}    // extract words or numbers from a line
//template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}    // convert a number to string
//template <class T> inline T Mod(T n,T m) {return (n%m+m)%m;}    // negative mod
//template <class T> void show(T a){cout << a << endl;}
//template <class T> void show(T a, T b){cout << a << ' ' << b << endl;}
//LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}

#define MAX 200010
/*************************************************HABIJABI ENDS HERE******************************************************/

int cum[55][55];

class TaroGrid {
public:
	int getNumber(vector <string> grid) {
		int i, ret = 1, j;
		clr(cum, 0);
		for(i = 0; i < SZ(grid[0]); i++)
        {
            cum[0][i] = 1;
            for(j = 1; j < SZ(grid); j++)
            {
                if(grid[j][i] == grid[j - 1][i])
                    cum[j][i] = cum[j - 1][i] +  1;
                else
                    cum[j][i] = 1;
                ret = max(ret, cum[j][i]);
            }
        }
        return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	TaroGrid *obj;
	int answer;
	obj = new TaroGrid();
	clock_t startTime = clock();
	answer = obj->getNumber(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	vector <string> p0;
	int p1;

	// ----- test 0 -----
	disabled = false;
	p0 = {"W"};
	p1 = 1;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = {"WB","BW"};
	p1 = 1;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = {"BWW","BBB","BWB"};
	p1 = 3;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = {"BWBW","BBWB","WWWB","BWWW"};
	p1 = 3;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = {"BWB","BBW","BWB"};
	p1 = 3;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 5 -----
	disabled = false;
	p0 = {"BBWWBBWW","BBWWBBWW","WWBBWWBB","WWBBWWBB","BBWWBBWW","BBWWBBWW","WWBBWWBB","WWBBWWBB"};
	p1 = 2;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// Cat Taro has a square grid with N rows and N columns.
// Each cell of the grid is painted either black or white.
// You are given a vector <string> grid which represents the current state of the grid.
// Each element of grid represents one row of the grid.
// In grid, the character 'W' represents a white cell, and the character 'B' represents a black cell.
//
//
//
//
// Taro wants to choose a set of consecutive cells that are in the same column and are painted in the same color.
// Return the largest number of cells he can choose.
//
//
// DEFINITION
// Class:TaroGrid
// Method:getNumber
// Parameters:vector <string>
// Returns:int
// Method signature:int getNumber(vector <string> grid)
//
//
// CONSTRAINTS
// -N will be between 1 and 50, inclusive.
// -grid will contain exactly N elements.
// -Each element of grid will contain exactly N characters.
// -Each character in grid will be 'W' or 'B'.
//
//
// EXAMPLES
//
// 0)
// {"W"}
//
// Returns: 1
//
//
//
// 1)
// {"WB",
//  "BW"}
//
// Returns: 1
//
//
//
// 2)
// {"BWW",
//  "BBB",
//  "BWB"}
//
// Returns: 3
//
// He can choose the entire leftmost column (i.e., character 0 of each element of grid).
//
// 3)
// {"BWBW",
//  "BBWB",
//  "WWWB",
//  "BWWW"}
//
// Returns: 3
//
//
//
// 4)
// {"BWB",
//  "BBW",
//  "BWB"}
//
// Returns: 3
//
//
//
// 5)
// {"BBWWBBWW",
//  "BBWWBBWW",
//  "WWBBWWBB",
//  "WWBBWWBB",
//  "BBWWBBWW",
//  "BBWWBBWW",
//  "WWBBWWBB",
//  "WWBBWWBB"}
//
// Returns: 2
//
// Note that the chosen cells must be consecutive.
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
