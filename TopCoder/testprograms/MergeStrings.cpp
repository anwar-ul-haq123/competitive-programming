#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define infinity (1 << 28)
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define CF ios_base::sync_with_stdio(0);cin.tie(0);
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define SZ(v) (int)(v.size())
#define eps 10e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;

template <class T> T sqr(T a){return a * a;}    // square
template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}     //  n  to the power p
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}    // extract words or numbers from a line
template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}    // convert a number to string
template <class T> inline T Mod(T n,T m) {return (n%m+m)%m;}    // negative mod
template <class T> void print_all(T v) {for(int i = 0; i < v.size(); i++) cout << v[i] << ' ';};
template <class T> void print_all(T &v, int len) {for(int i = 0; i < len; i++) cout << v[i] << ' ';}     // prints all elements in a vector or array
template <class T> void print_pair(T v, int len) {for(int i = 0; i < len; i++) cout << v[i].first << ' ' << v[i].second << endl;} // prints pair vector
//LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}

#define MAX 500010
/*************************************************HABIJABI ENDS HERE******************************************************/


class MergeStrings {
public:
    int dp[55][55], mark[55][55];
    string S, A, B, sdp[55][55];

    int call(int s, int a, int b)
    {
        if(a == SZ(A) && b == SZ(B))
            return 1;
        int &ret = dp[a][b];
        if(ret != -1)
             return ret;
        ret = 0;
        if(S[s] == '?')
        {
            if(a < SZ(A))
                ret = max(ret, call(s + 1, a + 1, b));
            if(b < SZ(B))
                ret = max(ret, call(s + 1, a, b + 1));
        }
        if(a < SZ(A) && S[s] == A[a])
            ret = max(ret, call(s + 1, a + 1, b));
        else if(b < SZ(B) && S[s] == B[b])
            ret = max(ret, call(s + 1, a, b + 1));
        return ret;
    }

    string get_result(int s, int a, int b)
    {
        if(a == SZ(A) && b == SZ(B))
            return "";
        string &ret = sdp[a][b];
        if(mark[a][b])
             return ret;
        mark[a][b] = 1;
        ret = "a";
        if(S[s] == '?')
        {
            if(a < SZ(A) && call(s + 1, a + 1, b))
                ret = min(ret, A[a] + get_result(s + 1, a + 1, b));
            if(b < SZ(B) && call(s + 1, a, b + 1))
                ret = min(ret, B[b] + get_result(s + 1, a, b + 1));
            return ret;
        }
        if(a < SZ(A) && S[s] == A[a])
            ret = min(ret, A[a] + get_result(s + 1, a + 1, b));
        if(b < SZ(B) && S[s] == B[b])
            ret = min(ret, B[b] + get_result(s + 1, a, b + 1));
        return ret;
    }

	string getmin(string Ss, string Aa, string Bb) {
        S = Ss;
        A = Aa;
        B = Bb;
        clr(dp, -1);

        if(!call(0, 0, 0))
            return "";
        return get_result(0, 0, 0);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, string p1, string p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"" << "," << "\"" << p2 << "\"";
	cout << "]" << endl;
	MergeStrings *obj;
	string answer;
	obj = new MergeStrings();
	clock_t startTime = clock();
	answer = obj->getmin(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	string p0;
	string p1;
	string p2;
	string p3;

	// ----- test 0 -----
	disabled = false;
	p0 = "?" "?CC?" "?";
	p1 = "ABC";
	p2 = "BCC";
	p3 = "ABCCBC";
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = "WHAT?";
	p1 = "THE";
	p2 = "WA";
	p3 = "";
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = "PARROT";
	p1 = "PARROT";
	p2 = "";
	p3 = "PARROT";
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?";
	p1 = "AZZAA";
	p2 = "AZAZZA";
	p3 = "AAZAZZAAZZA";
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = "?" "?" "?" "?K?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?D?" "?" "?K?" "?" "?K?" "?" "?" "?" "?" "?" "?" "?K?" "?" "?" "?" "?K?" "?" "?" "?" "?" "?" "?";
	p1 = "KKKKKDKKKDKKDDKDDDKDKK";
	p2 = "KDKDDKKKDDKDDKKKDKDKKDDDDDDD";
	p3 = "KDKDKDKKKDDKDDKKKDKDKKDKDDDKDDDKKDKKKDKKDDKDDDKDKK";
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 5 -----
	disabled = false;
	p0 = "";
	p1 = "";
	p2 = "";
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, false, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 6 -----
	disabled = false;
	p0 = "?" "?" "?" "?Q?" "?" "?J?" "?" "?B?X";
	p1 = "PIQJBQ";
	p2 = "CPVJVXBLX";
	p3 = "CPIPQJBVJQVXBLX";
	all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 7 -----
	disabled = false;
	p0 = "W?WW?" "?" "?" "?" "?" "?P?" "?CC?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?P?W?" "?" "?" "?P?C?" "?" "?W";
	p1 = "WWWCWWCPCWC";
	p2 = "WPCCWWWCCCPWPWPWPWWWWCCPCPPWWWWPPCCWWWW";
	p3 = "WPWWCWCWWCPCWCCWWWCCCPWPWPWPWWWWCCPCPPWWWWPPCCWWWW";
	all_right = (disabled || KawigiEdit_RunTest(7, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Guts is a slow loris who likes to play with strings.
//
// String C is obtained by shuffling strings A and B if we can create C by repeatedly taking either the first character of A or the first character of B. Formally, string C is obtained by shuffling strings A and B if length(C) = length(A) + length(B) and there are sequences of integers X and Y such that:
//
// length(X) = length(A) and length(Y) = length(B).
// For each valid i, X[i] < X[i+1].
// For each valid i, Y[i] < Y[i+1].
// For each valid i and j, X[i] != Y[j].
// For each valid i, C[X[i]] = A[i].
// For each valid i, C[Y[i]] = B[i].
//
//
// You are given strings S, A, and B. Strings A and B contain only letters, string S can also contain multiple copies of the '?' (question mark) character. The '?' is a wildcard that represents any single letter. Guts wants to shuffle strings A and B in such a way that the resulting string matches S.
//
// Replace each '?' with a letter in such a way that the resulting string S can be obtained by shuffling A and B. Return the resulting string S. If there are multiple solutions, return the lexicographically smallest one. If there is no solution, return an empty string instead.
//
// DEFINITION
// Class:MergeStrings
// Method:getmin
// Parameters:string, string, string
// Returns:string
// Method signature:string getmin(string S, string A, string B)
//
//
// NOTES
// -Given two distinct strings X and Y such that length(X)=length(Y), the lexicographically smaller one is the one that has a character with a smaller ASCII value on the first position on which they differ.
//
//
// CONSTRAINTS
// -S will contain between 1 and 50 characters, inclusive.
// -The number of characters in S will be same as the total number of characters of A and B.
// -Each character in S will be an uppercase letter ('A'-'Z') or '?'.
// -Each character in A and B will be an uppercase letter ('A'-'Z').
//
//
// EXAMPLES
//
// 0)
// "??CC??"
// "ABC"
// "BCC"
//
// Returns: "ABCCBC"
//
// Out of all strings that can be obtained by shuffling "ABC" and "BCC", only two match "??CC??": the strings "ABCCBC" and "BACCBC". The string "ABCCBC" is the lexicographically smaller of the two.
//
// 1)
// "WHAT?"
// "THE"
// "WA"
//
// Returns: ""
//
// None of the strings obtained by shuffling "THE" and "WA" matches "WHAT?".
//
// 2)
// "PARROT"
// "PARROT"
// ""
//
// Returns: "PARROT"
//
// One of A and B may sometimes be empty.
//
// 3)
// "???????????"
// "AZZAA"
// "AZAZZA"
//
// Returns: "AAZAZZAAZZA"
//
//
//
// 4)
// "????K??????????????D???K???K????????K?????K???????"
// "KKKKKDKKKDKKDDKDDDKDKK"
// "KDKDDKKKDDKDDKKKDKDKKDDDDDDD"
//
// Returns: "KDKDKDKKKDDKDDKKKDKDKKDKDDDKDDDKKDKKKDKKDDKDDDKDKK"
//
//
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
