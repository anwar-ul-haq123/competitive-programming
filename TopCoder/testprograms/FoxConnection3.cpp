#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <assert.h>

#define in freopen("input.txt", "r", stdin);
#define out freopen("output.txt", "w", stdout);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define mp(a, b) make_pair(a, b)
#define infinity (1 << 28)
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define CF ios_base::sync_with_stdio(0);cin.tie(0);
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define SZ(v) (int)(v.size())
#define eps 10e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

//struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;
//
//template <class T> T sqr(T a){return a * a;}    // square
//template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}     //  n  to the power p
//template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
//template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}    // extract words or numbers from a line
//template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}    // convert a number to string
//template <class T> inline T Mod(T n,T m) {return (n%m+m)%m;}    // negative mod
//template <class T> void show(T a){cout << a << endl;}
//template <class T> void show(T a, T b){cout << a << ' ' << b << endl;}
//LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}

#define MAX 200010
/***********************************THE GRASS IS ALWAYS GREENER ON THE OTHER SIDE***********************************/

class FoxConnection3 {
public:
	long long minimalSteps(vector <int> x, vector <int> y) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	FoxConnection3 *obj;
	long long answer;
	obj = new FoxConnection3();
	clock_t startTime = clock();
	answer = obj->minimalSteps(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	long long p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {0,0,1,-2};
	p1 = {1,-1,0,0};
	p2 = 2ll;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {0,0,0,0,0,0};
	p1 = {1,2,3,4,5,6};
	p2 = 0ll;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {-123456789,-58585858,-47474747,123,456,789012345};
	p1 = {0,0,0,0,0,0};
	p2 = 1018530309ll;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {1,7,3,5,2};
	p1 = {2,7,5,3,7};
	p2 = 12ll;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {-3,0,1,-2,3,2};
	p1 = {2,-3,0,1,-1,-1};
	p2 = 10ll;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = {-96277832,507856257,-86306299,-806700273,-775932643,-273209838};
	p1 = {-955536464,-599634138,399850429,-165706338,-537800480,738983556};
	p2 = 5247213600ll;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 6 -----
	disabled = false;
	p0 = {0};
	p1 = {0};
	p2 = 0ll;
	all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// The infinite plane is divided into a grid of unit square cells.
// Two cells are considered adjacent if they share a side.
// There are some foxes on the plane.
// Each fox is currently standing on a different cell.
// This must also be preserved in the future - there cannot be two foxes in the same cell at the same time.
// 
// 
// Whenever a fox takes a step, it moves to a cell that is adjacent to its current cell.
// A set of cells is considered connected if a fox could walk from any cell in the set to any other cell in the set without leaving the set.
// 
// 
// All foxes want to get together.
// More precisely, they want to move in such a way that at the end the set of cells occupied by the foxes is connected.
// Return the smallest total number of steps the foxes need to make in order to reach such a configuration.
// 
// 
// DEFINITION
// Class:FoxConnection3
// Method:minimalSteps
// Parameters:vector <int>, vector <int>
// Returns:long long
// Method signature:long long minimalSteps(vector <int> x, vector <int> y)
// 
// 
// CONSTRAINTS
// -x will contain between 1 and 6 elements, inclusive.
// -x and y will contain the same number of elements.
// -Each element in x will be between -1,000,000,000 and 1,000,000,000, inclusive.
// -Each element in y will be between -1,000,000,000 and 1,000,000,000, inclusive.
// -No two foxes will be at the same position.
// 
// 
// EXAMPLES
// 
// 0)
// {0,0,1,-2}
// {1,-1,0,0}
// 
// Returns: 2
// 
// The optimal solution is to move the last fox 2 steps to the right.
// 
// 1)
// {0,0,0,0,0,0}
// {1,2,3,4,5,6}
// 
// Returns: 0
// 
// Foxes are already connected, so we don't need any operations.
// 
// 2)
// {-123456789,-58585858,-47474747,123,456,789012345}
// {0,0,0,0,0,0}
// 
// Returns: 1018530309
// 
// 
// 
// 3)
// {1,7,3,5,2}
// {2,7,5,3,7}
// 
// Returns: 12
// 
// 
// 
// 4)
// {-3,0,1,-2,3,2}
// {2,-3,0,1,-1,-1}
// 
// Returns: 10
// 
// 
// 
// 5)
// {-96277832,507856257,-86306299,-806700273,-775932643,-273209838}
// {-955536464,-599634138,399850429,-165706338,-537800480,738983556}
// 
// Returns: 5247213600
// 
// 
// 
// 6)
// {0}
// {0}
// 
// Returns: 0
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
