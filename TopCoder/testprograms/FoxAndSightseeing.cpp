#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define infinity 2147483647
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define _ ios_base::sync_with_stdio(0);cin.tie(0);
#define SZ(v) (int)(v.size())
#define eps 10e-7

#define F(i, n) for(i = 0; i < n; i++)

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;

template <class T> T sqr(T a){return a * a;}    // square
template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}     //  n  to the power p
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}    // extract words or numbers from a line
template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}    // convert a number to string
template <class T> inline T Mod(T n,T m) {return (n%m+m)%m;}    // negative mod
template <class T> void print_all(T v) {for(int i = 0; i < v.size(); i++) cout << v[i] << ' ';};
template <class T> void print_all(T &v, int len) {for(int i = 0; i < len; i++) cout << v[i] << ' ';}     // prints all elements in a vector or array
template <class T> void print_pair(T v, int len) {for(int i = 0; i < len; i++) cout << v[i].first << ' ' << v[i].second << endl;} // prints pair vector
//LL bigmod(LL B,LL P,LL M){  LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}

#define MAX 100010
/*************************************************HABIJABI ENDS HERE******************************************************/


class FoxAndSightseeing {
public:
	int getMin(vector <int> position) {
		int mn = 1000000000, tot;
		for(int i = 1; i < SZ(position) - 1; i++)
        {
            tot = 0;
            int last = position[0];
            for(int j = 1; j < SZ(position); j++)
            {
                if(j == i)
                    continue;
                tot += abs(position[j] - last);
                last = position[j];
            }
            mn = min(tot, mn);
        }
    return mn;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	FoxAndSightseeing *obj;
	int answer;
	obj = new FoxAndSightseeing();
	clock_t startTime = clock();
	answer = obj->getMin(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	int p1;

	{
	// ----- test 0 -----
	int t0[] = {1,4,-1,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {-2,4,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {1,2,3,4,5,6,7,8,9,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 9;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {100,-100,99,-99};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 199;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	int t0[] = {74,84,92,23,5,-70,-47,-59,24,-86,-39,99,85,-42,54,100,47,-3,42,38};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 836;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	int t0[] = {2,-3,5,7,-11,-13,17,-19,23,29,-31,-37,-41,43,-47,-53,-59,61,-67,71};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 535;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// Fox Ciel is staying in Linear Country for sightseeing.
// The country consists of N cities numbered 0 through N-1.
// Ciel is currently staying in city 0.
//
//
// In this problem, we assume that the country is a straight line and that each city is a point on this line.
// You are given a vector <int> position with N elements.
// The i-th element in position represents the coordinate of the city i.
// The cities are numbered arbitrarily, their numbers are not related to their positions.
// Thus, distance between city i and city j is |position[i] - position[j]|,
// where |z| represents the absolute value of z.
//
//
// Ciel wanted to visit all the cities, so she planned a tour.
// She was going to visit city 0 on day 1, visit city 1 on day 2, and so on.
// She wanted to terminate the tour upon arrival to city N-1.
//
//
// Unfortunately, it turned out that Ciel's holiday has to be one day shorter.
// Of course, she must still start in city 0 and end in city N-1, so she decided to skip one of the other N-2 cities (i.e., one of cities 1 through N-2).
// She still wants to visit the other cities in the order given by their numbers.
// For example, if N=5, Ciel has three possibilities for her holiday: she will visit the cities in one of the orders (0,1,2,4), (0,1,3,4), or (0,2,3,4).
//
//
// Among these possibilities, Ciel will choose the one where the total distance she will have to travel is minimized.
// Compute and return this minimum total distance.
//
//
//
// DEFINITION
// Class:FoxAndSightseeing
// Method:getMin
// Parameters:vector <int>
// Returns:int
// Method signature:int getMin(vector <int> position)
//
//
// NOTES
// -You are not given the value of N, but you can easily determine it: N is equal to the number of elements in position.
//
//
// CONSTRAINTS
// -position will contain between 3 and 50 elements, inclusive.
// -Each element of position will be between -100 and 100, inclusive.
// -All the elements in position will be distinct.
//
//
// EXAMPLES
//
// 0)
// {1, 4, -1, 3}
//
// Returns: 4
//
// There are two strategies for Ciel.
//
// Skip city 1. The total distance is |1-(-1)|+|(-1)-3| = 2+4 = 6.
// Skip city 2. The total distance is |1-4|+|4-3| = 3+1 = 4.
//
// The second choice is better. So you should output 4.
//
// 1)
// {-2, 4, 3}
//
// Returns: 5
//
// There is only one strategy for Ciel: She skips city 1. The total distance is |(-2)-3| = 5.
//
// 2)
// {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
//
// Returns: 9
//
// For any choice she makes, the total distance is 9.
//
// 3)
// {100, -100, 99, -99}
//
// Returns: 199
//
// The optimum strategy is to skip city 1.
//
// 4)
// {74,84,92,23,5,-70,-47,-59,24,-86,-39,99,85,-42,54,100,47,-3,42,38}
//
// Returns: 836
//
//
//
// 5)
// {2,-3,5,7,-11,-13,17,-19,23,29,-31,-37,-41,43,-47,-53,-59,61,-67,71}
//
// Returns: 535
//
//
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
