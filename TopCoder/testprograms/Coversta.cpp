#include <bits/stdc++.h>

#define in freopen("input.txt", "r", stdin);
#define out freopen("output.txt", "w", stdout);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define mp(a, b) make_pair(a, b)
#define infinity (1 << 28)
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define CF ios_base::sync_with_stdio(0);cin.tie(0);
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // __builtin_popcountll for LL
#define SZ(v) (int)(v.size())
#define eps 1e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};
template <class T> T sqr(T a){return a * a;}
template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}
template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}
//LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}
struct fast{fast(){ios_base::sync_with_stdio(0);cin.tie(0);}}cincout;

#define MAX 110
/***********************************THE GRASS IS ALWAYS GREENER ON THE OTHER SIDE***********************************/

int cost[MAX][MAX];
vector <pair<int,int>> arr[MAX][MAX];

class Coversta {
public:
	int place(vector <string> a, vector <int> x, vector <int> y) {
	    clr(cost, 0);
		int n = SZ(a), m = SZ(a[0]), i, j, k, l;
		for(i = 0; i < n; i++)
            for(j = 0; j < m; j++)
                arr[i][j].clear();
		for( i = 0; i < n; i++)
        {
            for( j = 0; j < m; j++)
            {
                for( k = 0; k < SZ(x); k++)
                {
                    int nr = i+x[k];
                    int nc = j+y[k];
                    if(nr < 0 || nr >= n || nc < 0 || nc >= m) continue;
                    cost[i][j] += a[nr][nc] - '0';
                    arr[nr][nc].pb(mp(i,j));
                }
            }
        }
        int ret = 0;
        for(i = 0; i < n; i++)
        {
            for(j = 0; j < m; j++)
            {
                bool problem[MAX][MAX] = {0};
                for(k = 0; k < SZ(x); k++)
                {
                    int nr = i+x[k];
                    int nc = j+y[k];
                    if(nr < 0 || nr >= n || nc < 0 || nc >= m) continue;
                    for(auto p: arr[nr][nc])
                    {
                        problem[p.first][p.second] = 1;
                        if(p.first == i && p.second == j) continue;
//                        cost[p.first][p.second] -= a[nr][nc]-'0';
                    }
                }
                for(k = 0; k < n; k++)
                {
                    for(l = 0; l < m; l++)
                    {
                        if(i == k && j == l) continue;
                        int tem = 0;
                    for(int k2 = 0; k2 < SZ(x); k2++)
                    {
                        int nr = i+x[k2];
                        int nc = j+y[k2];
                        if(nr < 0 || nr >= n || nc < 0 || nc >= m) continue;
                        for(auto p: arr[nr][nc])
                        {
                            if(problem[p.first][p.second])
                                tem -= a[p.first][p.second]-'0';
                        }
                    }
                        ret = max(cost[i][j]+cost[k][l]-tem, ret);
                    }
                }

                for(k = 0; k < SZ(x); k++)
                {
                    int nr = i+x[k];
                    int nc = j+y[k];
                    if(nr < 0 || nr >= n || nc < 0 || nc >= m) continue;
                    for(auto p: arr[nr][nc])
                    {
                        if(p.first == i && p.second == j) continue;
//                        cost[p.first][p.second] += a[nr][nc]-'0';
                    }
                }
            }
        }
        return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <int> p1, vector <int> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	Coversta *obj;
	int answer;
	obj = new Coversta();
	clock_t startTime = clock();
	answer = obj->place(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <string> p0;
	vector <int> p1;
	vector <int> p2;
	int p3;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {"11","11"};
	p1 = {0,0};
	p2 = {0,1};
	p3 = 4;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {"11","11"};
	p1 = {0,1};
	p2 = {0,1};
	p3 = 3;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {"15","61"};
	p1 = {0};
	p2 = {0};
	p3 = 11;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {"151","655","661"};
	p1 = {0,0,-1};
	p2 = {0,1,0};
	p3 = 33;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {"303","333","000"};
	p1 = {-1,-1};
	p2 = {-1,1};
	p3 = 12;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = {"0000000","1010101"};
	p1 = {-1,-1};
	p2 = {-1,1};
	p3 = 0;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
