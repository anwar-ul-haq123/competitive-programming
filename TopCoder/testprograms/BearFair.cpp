#include <bits/stdc++.h>

#define in freopen("input.txt", "r", stdin);
#define out freopen("output.txt", "w", stdout);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define mp(a, b) make_pair(a, b)
#define infinity (1 << 28)
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define CF ios_base::sync_with_stdio(0);cin.tie(0);
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // __builtin_popcountll for LL
#define SZ(v) (int)(v.size())
#define eps 1e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};
template <class T> T sqr(T a){return a * a;}
template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}
template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}
//LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}
struct fast{fast(){ios_base::sync_with_stdio(0);cin.tie(0);}}cincout;

#define MAX 1010
/***********************************THE GRASS IS ALWAYS GREENER ON THE OTHER SIDE***********************************/


class BearFair {
public:
	string isFair(int n, int b, vector <int> upTo, vector <int> quantity) {
		int seen[MAX] = {0}, i, j;
		string f = "fair", u = "unfair";
		vector <pair<int,int>> arr(SZ(upTo));
		for(i = 0; i < SZ(upTo); i++)
            arr[i] = mp(upTo[i], quantity[i]);
        sort(all(arr));
        int even = 0, odd = 0;
        int last = 1;
        for(i = 0; i < SZ(arr); i++)
        {
            if(arr[i].second > arr[i].first)
                return u;
            for(j = 0; j < i; j++)
                if(arr[i].second < arr[j].second)
                    return u;
            if(i > 0 && abs(arr[i].first-arr[i-1].first) < abs(arr[i].second-arr[i-1].second))
                return u;
            if(i > 0 && arr[i].first - arr[i-1].first == arr[i].second - arr[i-1].second)
            {
                last = arr[i-1].first+1;
                while(last <= arr[i].first)
                {
                    if(last % 2)
                        odd++;
                    else
                        even++;
                    last++;
                }
            }
            else if(i == 0 && arr[i].first == arr[i].second)
            {
                last = 1;
                while(last <= arr[i].first)
                {
                    if(last % 2)
                        odd++;
                    else
                        even++;
                    last++;
                }
            }
            else
            {
                int cur;
                if(i > 0)
                    cur = min(arr[i].first-arr[i-1].first, arr[i].second - arr[i-1].second);
                else
                    cur = min(arr[i].first, arr[i].second);
                while(cur--)
                {
                    if(even > odd)
                        odd++;
                    else
                        even++;
                }
            }
            cout << even << ' ' << odd << endl;
        }
        int cur = min(b-arr.back().first, n - arr.back().second);
        while(cur--)
        {
            if(even > odd)
                odd++;
            else
                even++;
        }
        cout << even << ' ' << odd << endl;
        if(even != odd || even*2>n || odd*2>n || even+odd < n)
            return u;
        return f;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <int> p2, vector <int> p3, bool hasAnswer, string p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}";
	cout << "]" << endl;
	BearFair *obj;
	string answer;
	obj = new BearFair();
	clock_t startTime = clock();
	answer = obj->isFair(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p4 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	int p0;
	int p1;
	vector <int> p2;
	vector <int> p3;
	string p4;

	// ----- test 0 -----
	disabled = false;
	p0 = 2;
	p1 = 2;
	p2 = {1};
	p3 = {2};
	p4 = "fair";
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = 4;
	p1 = 6;
	p2 = {3,6};
	p3 = {2,3};
	p4 = "unfair";
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = 2;
	p1 = 6;
	p2 = {1,2,3};
	p3 = {1,1,2};
	p4 = "unfair";
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = 50;
	p1 = 1000;
	p2 = {736,205,264,235,273,40,901,37,900,424,122,517,820,402,669,279,455,921,774,923,107,936,484,171,248,186,970,231,321,902,606,24,451,585,823,270,361,292,128,521,689,683,270,726,980,652,996,909,196,357};
	p3 = {35,9,9,9,9,3,46,3,46,18,7,25,39,18,32,9,20,49,37,49,7,49,24,8,9,8,49,9,12,46,29,2,20,29,39,9,16,11,7,27,33,32,9,34,49,32,50,47,8,16};
	p4 = "fair";
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = 4;
	p1 = 1000;
	p2 = {400,600};
	p3 = {4,0};
	p4 = "unfair";
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
