#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define infinity (1 << 28)
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define SZ(v) (int)(v.size())
#define eps 10e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;

template <class T> T sqr(T a){return a * a;}    // square
template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}     //  n  to the power p
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}    // extract words or numbers from a line
template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}    // convert a number to string
template <class T> inline T Mod(T n,T m) {return (n%m+m)%m;}    // negative mod
template <class T> void print_all(T v) {for(int i = 0; i < v.size(); i++) cout << v[i] << ' ';};
template <class T> void print_all(T &v, int len) {for(int i = 0; i < len; i++) cout << v[i] << ' ';}     // prints all elements in a vector or array
template <class T> void print_pair(T v, int len) {for(int i = 0; i < len; i++) cout << v[i].first << ' ' << v[i].second << endl;} // prints pair vector
//LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}

#define MAX 100010
/*************************************************HABIJABI ENDS HERE******************************************************/

class CandyShop {
public:
	int countProbablePlaces(vector <int> X, vector <int> Y, vector <int> R) {
		int ret = 0;
		bool ok;
		for(int i = -200; i < 201; i++)
            for(int j = -200; j < 201; j++)
            {
                ok = true;
                for(int r = 0; r < SZ(R); r++)
                    ok &= (abs(i - X[r]) + abs(j - Y[r]) <= R[r]);
                ret += ok;
            }
        return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	CandyShop *obj;
	int answer;
	obj = new CandyShop();
	clock_t startTime = clock();
	answer = obj->countProbablePlaces(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	int p3;

	// ----- test 0 -----
	disabled = false;
	p0 = {0};
	p1 = {0};
	p2 = {1};
	p3 = 5;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = {0};
	p1 = {0};
	p2 = {2};
	p3 = 13;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = {2,3};
	p1 = {1,-1};
	p2 = {2,2};
	p3 = 4;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = {2,3,5};
	p1 = {1,-1,0};
	p2 = {2,2,3};
	p3 = 3;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = {-100,-100,-100,0,0,0,100,100,100};
	p1 = {-100,0,100,-100,0,100,-100,0,100};
	p2 = {1,1,1,1,1,1,1,1,1};
	p3 = 0;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 5 -----
	disabled = false;
	p0 = {-3,3,5,5};
	p1 = {4,5,-2,0};
	p2 = {10,11,8,6};
	p3 = 33;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Manao has been to a tremendous candy shop several times. He has forgotten its exact placement, but remembers some information about each time he visited the shop.
//
// The city Manao lives in can be represented as an infinite two-dimensional plane with a Cartesian coordinate system. From point (x, y), Manao can move to any of the points (x - 1, y), (x, y - 1), (x + 1, y), or (x, y + 1). In order to perform each of these 4 moves, he needs to walk 1 unit of length. Manao recalls that the candy shop was located at a point with integer coordinates. Also, he remembers that the i-th time he visited the candy shop, he went there from point (X[i], Y[i]) and walked at most R[i] units of length.
//
// Since Manao's visits to the shop span a long period of time, he may have misremembered some details. If no intersection complies with his reminiscence, return 0. Otherwise return the number of different intersections where Manao's candy shop could be, assuming Manao remembers everything correctly.
//
// DEFINITION
// Class:CandyShop
// Method:countProbablePlaces
// Parameters:vector <int>, vector <int>, vector <int>
// Returns:int
// Method signature:int countProbablePlaces(vector <int> X, vector <int> Y, vector <int> R)
//
//
// CONSTRAINTS
// -X will contain between 1 and 50 elements, inclusive.
// -Y will contain the same number of elements as X.
// -R will contain the same number of elements as X.
// -Each element of X will be between -100 and 100, inclusive.
// -Each element of Y will be between -100 and 100, inclusive.
// -Each element of R will be between 1 and 100, inclusive.
//
//
// EXAMPLES
//
// 0)
// {0}
// {0}
// {1}
//
// Returns: 5
//
// Manao walked at most 1 unit of distance. Therefore, the shop could be at (0,0) if Manao didn't walk at all and at (1,0), (0,1), (-1,0) or (0,-1) if he walked.
//
// 1)
// {0}
// {0}
// {2}
//
// Returns: 13
//
// 8 new locations are introduced if Manao walks another unit of distance.
//
// 2)
// {2,3}
// {1,-1}
// {2,2}
//
// Returns: 4
//
// The possible places for the shop are intersections (2,0), (2,-1), (3,0) and (3,1).
//
// 3)
// {2,3,5}
// {1,-1,0}
// {2,2,3}
//
// Returns: 3
//
// This is the same situation as in the previous example, but Manao has been to the shop once more. After this visit, (2,-1) is also ruled out from the possibilities list.
//
// 4)
// {-100,-100,-100,0,0,0,100,100,100}
// {-100,0,100,-100,0,100,-100,0,100}
// {1,1,1,1,1,1,1,1,1}
//
// Returns: 0
//
// Manao is surely mistaken in his reminiscence.
//
// 5)
// {-3,3,5,5}
// {4,5,-2,0}
// {10,11,8,6}
//
// Returns: 33
//
//
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
