#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define infinity (1 << 28)
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define SZ(v) (int)(v.size())
#define eps 10e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;

template <class T> T sqr(T a){return a * a;}    // square
template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}     //  n  to the power p
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}    // extract words or numbers from a line
template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}    // convert a number to string
template <class T> inline T Mod(T n,T m) {return (n%m+m)%m;}    // negative mod
template <class T> void print_all(T v) {for(int i = 0; i < v.size(); i++) cout << v[i] << ' ';};
template <class T> void print_all(T &v, int len) {for(int i = 0; i < len; i++) cout << v[i] << ' ';}     // prints all elements in a vector or array
template <class T> void print_pair(T v, int len) {for(int i = 0; i < len; i++) cout << v[i].first << ' ' << v[i].second << endl;} // prints pair vector
//LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}

#define MAX 100010
/*************************************************HABIJABI ENDS HERE******************************************************/

class DivideByZero {
public:
	int CountNumbers(vector <int> numbers) {
		map <int, int> ans;
		int n = SZ(numbers), flag = 1;
		while(flag)
		{
		    flag = 0;
		    n = SZ(numbers);
		    sort(all(numbers));
		    for(int i = 0; i < n; i++)
            {
                ans[numbers[i]] = 1;
                for(int j = i + 1; j < n; j++)
                {
                    int tem = numbers[j] / numbers[i];
                    if(ans.find(tem) == ans.end())
                        flag = 1, numbers.pb(tem);
                    ans[tem] = 1;
                }
            }
		}
		return SZ(ans);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	DivideByZero *obj;
	int answer;
	obj = new DivideByZero();
	clock_t startTime = clock();
	answer = obj->CountNumbers(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	vector <int> p0;
	int p1;

	// ----- test 0 -----
	disabled = false;
	p0 = {9,2};
	p1 = 3;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = {8,2};
	p1 = 3;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = {50};
	p1 = 1;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = {1,5,8,30,15,4};
	p1 = 11;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = {1,2,4,8,16,32,64};
	p1 = 7;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 5 -----
	disabled = false;
	p0 = {6,2,18};
	p1 = 7;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Little John has a piece of paper with some distinct integers written on it.
// You are given a vector <int> numbers.
// The elements of numbers are the numbers written on John's paper.
//
// John is now going to add some new numbers to his paper.
// While doing so, he will be using integer division.
// When doing integer division, we discard the fractional part of the result.
// In this problem, we will use "div" to denote integer division.
// For example, 15 div 5 = 3, and 24 div 5 = 4.
//
// John will repeat the following process:
// He will look at his paper and select two distinct numbers A and B such that A is greater than B.
// He will compute C = A div B.
// If C is not written on his paper yet, he will add it to the paper.
//
// The process will stop once there is no way for John to add a new number to his paper.
// Compute and return how many numbers will there be on John's paper at the end.
//
// DEFINITION
// Class:DivideByZero
// Method:CountNumbers
// Parameters:vector <int>
// Returns:int
// Method signature:int CountNumbers(vector <int> numbers)
//
//
// NOTES
// -The return value does not depend on the order in which John adds new numbers to his paper.
//
//
// CONSTRAINTS
// -numbers will contain between 1 and 100 elements, inclusive.
// -Each element of numbers will be between 1 and 100, inclusive.
// -The elements in numbers will be distinct.
//
//
// EXAMPLES
//
// 0)
// {9, 2}
//
// Returns: 3
//
// John starts with just 9 and 2 on his paper.
// He can add the number 4, because 9 div 2 = 4.
// After he adds the number 4, there will be no more numbers to add, because 9 div 4 = 2, and also 4 div 2 = 2.
// Thus, at the end John's paper will contain 3 numbers: 9, 2, and 4.
//
// 1)
// {8, 2}
//
// Returns: 3
//
//
//
// 2)
// {50}
//
// Returns: 1
//
// We only have one number. There isn't anything John can do.
//
// 3)
// {1, 5, 8, 30, 15, 4}
//
// Returns: 11
//
//
//
// 4)
// {1, 2, 4, 8, 16, 32, 64}
//
// Returns: 7
//
//
//
// 5)
// {6, 2, 18}
//
// Returns: 7
//
// Once John has a number on his paper, he can use it when producing new numbers.
// For example, in this case he can add 9 (computed as 18 div 2), and then add 1 (computed as 9 div 6).
// The numbers he will have at the end are 1, 2, 3, 4, 6, 9, and 18.
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
