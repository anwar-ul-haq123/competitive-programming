#include <bits/stdc++.h>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pub push_back
#define pob pop_back
#define infinity 2147483647
#define LL long long
#define Pi acos(-1)
#define SZ 100010
#define VI vector <int>
#define all(v) v.begin(), v.end()

#define _ ios_base::sync_with_stdio(0);cin.tie(0);

int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
///int col[4] = {1, 0, -1, 0};
///int row[4] = {0, 1, 0, -1};
///int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y;};

template <class T> T sqr(T a){return a * a;};
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}
template <class T> T GCD(T a, T b) {if(b == 0) return a; return GCD(b, a % b);}
template <class T> T LCM(T a, T b) {return (a * b) / GCD(a, b);}
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}
template <class T> string tostr(T n) {stringstream ss; ss << n; return ss.str();}


class ThreeColorabilityEasy {
public:
    void bfsc(int &grid, int r, int c){
        queue <int> Q;
        int color[r][c];
        Q.push(0, 0);
        color[0][0] = 0;
        while(!Q.empty()){
            int parx = Q.front();
            Q.pop();
            int pary = Q.front();
            Q.pop();
            for(int p = 0; p < 8; p++){
                int newcol = col[p] + parx;
                int newrow = row[p] + pary;
                if(newcol >= 0 && newcol < c && newrow >= 0 && newrow < r){
                }
            }
        }
    }
	string isColorable(vector <string> cells) {
	_
    int r = cells.size() + 1, c = cells[0].size() + 1;
    int grid[r][c], i, j;
    clr(grid, 1);
    for(i = 0; i < r; i++){
        for(j = 0; j < c; j++){
            if(cells[i][j] == 'N')
                grid[(i - 1) * c + j + 1][i * c + j] = grid[i * c + j][(i - 1) * c + j + 1] = 0;
            else
                grid[(i - 1) * c + j][(i * c + j + 1] = grid[(i * c + j + 1][(i - 1) * c + j] = 0;
        }
    }
    bfsc(&grid, r, c);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	ThreeColorabilityEasy *obj;
	string answer;
	obj = new ThreeColorabilityEasy();
	clock_t startTime = clock();
	answer = obj->isColorable(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	string p1;

	{
	// ----- test 0 -----
	string t0[] = {"Z"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Yes";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"NZ","NZ"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Yes";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"ZZZ","ZNZ"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "No";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"NZNZNNN","NNZNNNZ","NNNNZZZ","ZZZNZZN","ZZNZNNN","NZZZZNN","ZZZNZNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "No";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	string t0[] = {"ZZZZ","ZZZZ","ZZZZ"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Yes";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// There is a H times W rectangle divided into unit cells.
// The rows of cells are numbered 0 to H-1 from top to bottom, and the columns are numbered 0 to W-1 from left to right.
// The corners of cells are called lattice points.
// By definition, there are (H+1)*(W+1) lattice points in our rectangle.
//
//
// Each of the four edges of each cell is painted white.
// Additionally, in each cell exactly one of the two diagonals is painted white.
// Two lattice points are called adjacent if they are connected by a white line segment.
// (In other words, consecutive corners of a cell are always adjacent, opposite corners of a cell are adjacent if and only if they are connected by a painted diagonal, and no other pairs of lattice points are adjacent.)
//
//
// We now want to color each of the lattice points using one of three available colors: red, green, or blue.
// There is only one constraint: adjacent lattice points are not allowed to share the same color.
//
//
// You are given a vector <string> cells with H elements, each consisting of W characters.
// If cells[i][j] is 'N', there is a diagonal line from the top left to the bottom right corner in the cell in row i, column j.
// If cells[i][j] is 'Z', there is a diagonal line from the top right to the bottom left corner in the cell in row i, column j.
//
//
// If there is at least one valid way to color all lattice points, return "Yes" (quotes for clarity).
// Otherwise, return "No".
//
//
//
// DEFINITION
// Class:ThreeColorabilityEasy
// Method:isColorable
// Parameters:vector <string>
// Returns:string
// Method signature:string isColorable(vector <string> cells)
//
//
// CONSTRAINTS
// -cells will contain between 1 and 50 elements, inclusive.
// -Each element of cells will contain between 1 and 50 characters, inclusive.
// -All elements of cells will contain the same number of characters.
// -Each character of cells will be either 'N' or 'Z'.
//
//
// EXAMPLES
//
// 0)
// {"Z"}
//
// Returns: "Yes"
//
// One of the possible colorings is as follows.
//
//
//
//
// 1)
// {"NZ"
// ,"NZ"}
//
// Returns: "Yes"
//
//
//
//
//
// 2)
// {"ZZZ"
// ,"ZNZ"}
//
// Returns: "No"
//
//
//
// 3)
// {"NZNZNNN"
// ,"NNZNNNZ"
// ,"NNNNZZZ"
// ,"ZZZNZZN"
// ,"ZZNZNNN"
// ,"NZZZZNN"
// ,"ZZZNZNN"}
//
// Returns: "No"
//
//
//
// 4)
// {"ZZZZ"
// ,"ZZZZ"
// ,"ZZZZ"}
//
// Returns: "Yes"
//
//
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
