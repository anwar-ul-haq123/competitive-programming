#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <assert.h>

#define in freopen("input.txt", "r", stdin);
#define out freopen("output.txt", "w", stdout);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define mp(a, b) make_pair(a, b)
#define infinity (1 << 28)
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define CF ios_base::sync_with_stdio(0);cin.tie(0);
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define SZ(v) (int)(v.size())
#define eps 10e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

//struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;
//
//template <class T> T sqr(T a){return a * a;}    // square
//template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}     //  n  to the power p
//template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
//template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}    // extract words or numbers from a line
//template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}    // convert a number to string
//template <class T> inline T Mod(T n,T m) {return (n%m+m)%m;}    // negative mod
//template <class T> void print_all(T v) {for(int i = 0; i < v.size(); i++) cout << v[i] << ' ';};
//template <class T> void print_all(T &v, int len) {for(int i = 0; i < len; i++) cout << v[i] << ' ';}     // prints all elements in a vector or array
//template <class T> void print_pair(T v, int len) {for(int i = 0; i < len; i++) cout << v[i].first << ' ' << v[i].second << endl;} // prints pair vector
//LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}

#define MAX 200010
/*************************************************HABIJABI ENDS HERE******************************************************/



class SuffixArrayDiv2 {
public:
	string smallerOne(string s) {
	    vector <pair<string, int> > init;
	    int i, j;
	    for(i = 0; i < SZ(s); i++)
        {
            init.pb(make_pair(s.substr(i), i));
        }
        sort(all(init));
        int suffixes[55];
        for(i = 0; i < SZ(s); i++)
            suffixes[i] = init[i].second;
        for(i = 0; i < SZ(s); i++)
        {
            if(s[i] == 'a') continue;
            string tem = s;
            tem[i]--;
            vector <pair<string, int> > now;
            for(j = 0; j < SZ(tem); j++)
                now.pb(make_pair(tem.substr(j), j));
            sort(all(now));
            for(j = 0; j < SZ(tem); j++)
                if(suffixes[j] != now[j].second)
                    break;
            if(j >= SZ(tem))
                return "Exists";
        }
        return "Does not exist";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	SuffixArrayDiv2 *obj;
	string answer;
	obj = new SuffixArrayDiv2();
	clock_t startTime = clock();
	answer = obj->smallerOne(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	string p0;
	string p1;

	// ----- test 0 -----
	disabled = false;
	p0 = "abca";
	p1 = "Exists";
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = "bbbb";
	p1 = "Exists";
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = "aaaa";
	p1 = "Does not exist";
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = "examplesareveryweakthinktwicebeforesubmit";
	p1 = "Exists";
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = "ab";
	p1 = "Does not exist";
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Suffix number i of a string S is the suffix that starts with the character S[i].
// For example, for S="abcde" suffix 0 is "abcde" and suffix 3 is "de".
//
//
// The suffix array of a string S is defined as the permutation of suffix numbers that corresponds to their lexicographic order.
// For example, suppose that S="abca".
// If we order all suffixes of S lexicographically, we get the following: "a" < "abca" < "bca" < "ca".
// The corresponding suffix numbers are 3, 0, 1, and 2, in this order.
// Thus, for this string S the suffix array would be {3, 0, 1, 2}.
// Note that the length of a suffix array is the same as the length of the original string.
//
//
// In this problem, we will only consider strings of lowercase English letters ('a'-'z').
// You are given a string s.
// We are interested in a string t that is lexicographically smaller than s but has exactly the same suffix array.
// Return "Exists" if at least one such string t exists, and "Does not exist" otherwise.
//
// DEFINITION
// Class:SuffixArrayDiv2
// Method:smallerOne
// Parameters:string
// Returns:string
// Method signature:string smallerOne(string s)
//
//
// NOTES
// -Given two different strings A and B of the same length, A is lexicographically smaller than B if we have A[i] < B[i] for the smallest i such that A[i] and B[i] differ.
//
//
// CONSTRAINTS
// -s will contain between 1 and 50 elements, inclusive.
// -Each element in s will be a lowercase letter ('a'-'z').
//
//
// EXAMPLES
//
// 0)
// "abca"
//
// Returns: "Exists"
//
// For example, "aaqa" < "abca" but their suffix arrays are the same.
//
// 1)
// "bbbb"
//
// Returns: "Exists"
//
// Obviously, one of the strings smaller than "bbbb" with the same suffix array is "aaaa".
//
// 2)
// "aaaa"
//
// Returns: "Does not exist"
//
// The string "aaaa" is already the lexicographically smallest 4-letter string.
//
// 3)
// "examplesareveryweakthinktwicebeforesubmit"
//
// Returns: "Exists"
//
//
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
