#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define infinity (1 << 28)
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define SZ(v) (int)(v.size())
#define eps 10e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;

template <class T> T sqr(T a){return a * a;}    // square
template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}     //  n  to the power p
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}    // extract words or numbers from a line
template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}    // convert a number to string
template <class T> inline T Mod(T n,T m) {return (n%m+m)%m;}    // negative mod
template <class T> void print_all(T v) {for(int i = 0; i < v.size(); i++) cout << v[i] << ' ';};
template <class T> void print_all(T &v, int len) {for(int i = 0; i < len; i++) cout << v[i] << ' ';}     // prints all elements in a vector or array
template <class T> void print_pair(T v, int len) {for(int i = 0; i < len; i++) cout << v[i].first << ' ' << v[i].second << endl;} // prints pair vector
//LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}

#define MAX 100010
/*************************************************HABIJABI ENDS HERE******************************************************/

class GameOfLifeDivTwo {
public:
	string theSimulation(string init, int T) {
		int i;
		string sarr[T + 5];
		sarr[T] = init;
		while(T--)
        {
            sarr[T] = sarr[T + 1];
            for(i = 0; i < SZ(init); i++)
            {
                int prev1 = i - 1;
                int prev2 = i - 2;
                if(i == 0)
                    prev1 = SZ(init) - 1, prev2 = prev1 - 1;
                else if(i == 1)
                    prev2 = SZ(init) - 1;
                if(sarr[T + 1][prev1] == '0' && sarr[T + 1][prev2] == '0')
                    sarr[T][i] = '0';
                if(sarr[T + 1][prev1] == '1' && sarr[T + 1][prev2] == '1')
                    sarr[T][i] = '1';
            }

        }
        return sarr[0];
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, int p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1;
	cout << "]" << endl;
	GameOfLifeDivTwo *obj;
	string answer;
	obj = new GameOfLifeDivTwo();
	clock_t startTime = clock();
	answer = obj->theSimulation(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	string p0;
	int p1;
	string p2;

	// ----- test 0 -----
	disabled = false;
	p0 = "01010";
	p1 = 2;
	p2 = "00000";
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = "010101";
	p1 = 5;
	p2 = "101010";
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = "111010";
	p1 = 58;
	p2 = "111111";
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = "111111111";
	p1 = 511;
	p2 = "111111111";
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = "110010000010111110010100001001";
	p1 = 1000;
	p2 = "110000000001111110000000000001";
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 5 -----
	disabled = false;
	p0 = "00101110011";
	p1 = 0;
	p2 = "00101110011";
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Cat Taro and Rabbit Hanako invented a new variation of "Game Of Life".
//
//
// N cells are arranged around a circle. The cells are numbered from 0 to N-1. For each i between 0 and N-2, inclusive, the i-th cell and the (i+1)-th cell are adjacent to each other. The (N-1)-th cell and the 0-th cell are adjacent to each other. Each cell has exactly two adjacent cells. Each cell has a state: "live" or "die".
//
//
// Taro and Hanako can decide the states of the cells at time 0. For time t > 0, the states are determined as follows:
//
// Consider three cells: the i-th cell and the two cells that are adjacent to the i-th cell.
// If at least two of the three cells are "live" at time t-1, the state of the i-th cell at time t will be "live".
// If at least two of the three cells are "die" at time t-1, the state of the i-th cell at time t will be "die".
//
// You are given a string init. The number of cells in the game (N) is equal to the number of characters in init. The i-th character of init represents the state they assign to the i-th cell at time 0. '1' means "live" and '0' means "die". Return a string that describes the states at time T using the same encoding.
//
//
// DEFINITION
// Class:GameOfLifeDivTwo
// Method:theSimulation
// Parameters:string, int
// Returns:string
// Method signature:string theSimulation(string init, int T)
//
//
// CONSTRAINTS
// -init will contain between 3 and 50 characters, inclusive.
// -Each character in init will be '0' (zero) or '1' (one).
// -T will be between 0 and 1,000, inclusive.
//
//
// EXAMPLES
//
// 0)
// "01010"
// 2
//
// Returns: "00000"
//
// At time 0, Taro and Hanako set the state to "01010".
//
// At time 1, the state becomes "00100".
//
// At time 2, the state becomes "00000".
//
// 1)
// "010101"
// 5
//
// Returns: "101010"
//
// The state alternates between "010101" and "101010" repeatedly.
//
// 2)
// "111010"
// 58
//
// Returns: "111111"
//
//
//
// 3)
// "111111111"
// 511
//
// Returns: "111111111"
//
// The state never changes.
//
// 4)
// "110010000010111110010100001001"
// 1000
//
// Returns: "110000000001111110000000000001"
//
//
//
// 5)
// "00101110011"
// 0
//
// Returns: "00101110011"
//
//
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
