#include <bits/stdc++.h>

#define in freopen("input.txt", "r", stdin);
#define out freopen("output.txt", "w", stdout);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define mp(a, b) make_pair(a, b)
#define infinity (1 << 28)
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define CF ios_base::sync_with_stdio(0);cin.tie(0);
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // __builtin_popcountll for LL
#define SZ(v) (int)(v.size())
#define eps 1e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};
template <class T> T sqr(T a){return a * a;}
template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}
template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}
//LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}
struct fast{fast(){ios_base::sync_with_stdio(0);cin.tie(0);}}cincout;

#define MAX 200010
/***********************************THE GRASS IS ALWAYS GREENER ON THE OTHER SIDE***********************************/


class LuckySum {
public:

    int dp[16][2][2];

    string s;

    int call(int indx, int taken, int start)
    {
        if(indx == SZ(s))
            return (taken == 0) && (start == 1);
        int &ret = dp[indx][taken][start];
        if(ret != -1) return ret;
        ret = 0;
        if(!start)
        {
            if(s[indx] == '?')
            {
                ret |= call(indx+1, 1, 1);
                ret |= call(indx+1, 0, 0);
                ret |= call(indx+1, 0, 1);
            }
            if(s[indx] == '4' || s[indx] == '7')
                ret |= call(indx+1, 0, 0);

            if(s[indx] == '5' || s[indx] == '1' || s[indx] == '9')
                ret |= call(indx+1, 1, 1);
            if(s[indx] == '8')
                ret |= call(indx+1, 0, 1);
            return ret;
        }
        if(taken)
        {
            if((s[indx] == '1') || (s[indx] == '?'))
                ret |= call(indx+1, 0, start);
            if((s[indx] == '2') || (s[indx] == '?'))
                ret |= call(indx+1, 1, start);
            if((s[indx] == '4') || (s[indx] == '?'))
                ret |= call(indx+1, 0, start);
            if((s[indx] == '5') || (s[indx] == '?'))
                ret |= call(indx+1, 1, start);
            return ret;
        }
        if(s[indx] == '?' || s[indx] == '8')
            ret |= call(indx+1, 0, start);
        return ret;
    }

    string path(int indx, int taken, int start)
    {
        if(indx == SZ(s))
            return "";
        if(!start)
        {
            if(s[indx] == '?')
            {
                if(call(indx+1, 1, 1))
                    return "1" + path(indx+1, 1, 1);
                if(call(indx+1, 0, 0))
                    return "4" + path(indx+1, 0, 0);
                return "8" + path(indx+1, 0, 1);
            }
            if(s[indx] == '4' || s[indx] == '7')
                if(call(indx+1, 0, 0))
                    return tostring(s[indx]) + path(indx+1, 0, 0);

            if(s[indx] == '5' || s[indx] == '1' || s[indx] == '9')
                if(call(indx+1, 1, 1))
                    return tostring(s[indx]) + path(indx+1, 1, 1);
            return "8" + path(indx+1, 0, 1);
        }
        if(taken)
        {
            if((s[indx] == '1') || (s[indx] == '?'))
                if(call(indx+1, 0, start))
                    return "1" + path(indx+1, 0, start);
            if((s[indx] == '2') || (s[indx] == '?'))
                if(call(indx+1, 1, start))
                    return "2" + path(indx+1, 1, start);
            if((s[indx] == '4') || (s[indx] == '?'))
                if(call(indx+1, 0, start))
                    return "4" + path(indx+1, 0, start);
            if((s[indx] == '5') || (s[indx] == '?'))
                if(call(indx+1, 0, start))
                    return "5" + path(indx+1, 1, start);
        }
        return "8" + path(indx+1, 0, start);
    }

	long long construct(string note) {
	    clr(dp, -1);
	    s = note;
	    if(call(0, 0, 0))
            return extract(path(0, 0, 0), 1LL);
        return -1;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	LuckySum *obj;
	long long answer;
	obj = new LuckySum();
	clock_t startTime = clock();
	answer = obj->construct(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	string p0;
	long long p1;

	// ----- test 0 -----
	disabled = false;
	p0 = "?";
	p1 = 8ll;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = "?1";
	p1 = 11ll;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = "4?8";
	p1 = 448ll;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = "2?" "?";
	p1 = -1ll;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?";
	p1 = 11888888888888ll;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
