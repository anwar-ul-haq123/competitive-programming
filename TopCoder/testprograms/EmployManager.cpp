#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define infinity (1 << 28)
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define SZ(v) (int)(v.size())
#define eps 10e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;

template <class T> T sqr(T a){return a * a;}    // square
template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}     //  n  to the power p
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}    // extract words or numbers from a line
template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}    // convert a number to string
template <class T> inline T Mod(T n,T m) {return (n%m+m)%m;}    // negative mod
template <class T> void print_all(T v) {for(int i = 0; i < v.size(); i++) cout << v[i] << ' ';};
template <class T> void print_all(T &v, int len) {for(int i = 0; i < len; i++) cout << v[i] << ' ';}     // prints all elements in a vector or array
template <class T> void print_pair(T v, int len) {for(int i = 0; i < len; i++) cout << v[i].first << ' ' << v[i].second << endl;} // prints pair vector
//LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}

#define MAX 100010
/*************************************************HABIJABI ENDS HERE******************************************************/

class EmployManager {
public:
	int maximumEarnings(vector <int> value, vector <string> earning) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <string> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	EmployManager *obj;
	int answer;
	obj = new EmployManager();
	clock_t startTime = clock();
	answer = obj->maximumEarnings(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <string> p1;
	int p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {1,1};
	p1 = {"02","20"};
	p2 = 0;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {2,2};
	p1 = {"01","10"};
	p2 = -1;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {1,2,3,4};
	p1 = {"0121","1021","2201","1110"};
	p2 = -1;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {2,2,0,1,4,0,1,0,0,4};
	p1 = {"0100451253","1010518123","0102989242","0020093171","4590045480","5189400676","1893500826","2121468008","5247872007","3321066870"};
	p2 = 156;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Shiny wants to hire some managers for her company.
// There are N candidates, numbered 0 through N-1.
// She can employ any subset of these candidates, including possibly none or all of them.
// 
// For each of the candidates we know an amount in dollars Shiny must pay if she wants to hire that candidate.
// You are given a vector <int> value with N elements.
// For each i, value[i] is the amount in dollars Shiny has to pay if she wants to hire candidate i.
// 
// For each pair i < j of candidates we also know a value E(i,j) with the following meaning:
// 
// If both i and j are employed, the company will earn E(i,j) dollars.
// However, if neither i nor j are employed, they will cooperate to harm the company, which will cost the company E(i,j) dollars.
// 
// If one of them is employed and the other isn't, nothing happens.
// All the values E(i,j) are between 0 and 9, inclusive.
// 
// For your convenience, we also define E(i,i)=0 and E(j,i)=E(i,j) for all i and j.
// 
// You are given the above values E(i,j) encoded as a vector <string> earning with N elements, each consisting of N characters.
// For each i and j, earning[i][j] is the character ('0'-'9') that represents the value E(i,j).
// 
// You are given the vector <int> value and the vector <string> earning.
// Compute and return the largest total profit (i.e., earnings minus costs) the company can obtain by hiring a suitable subset of candidates.
// 
// 
// 
// DEFINITION
// Class:EmployManager
// Method:maximumEarnings
// Parameters:vector <int>, vector <string>
// Returns:int
// Method signature:int maximumEarnings(vector <int> value, vector <string> earning)
// 
// 
// CONSTRAINTS
// -value will contain between 1 and 50 elements, inclusive.
// -earning will contain the same number of elements as value.
// -The length of each element of earning will be the same as the number of elements in value.
// -Each character in each element of earning will be a digit ('0'-'9').
// -Each element of value will be between 0 and 1000, inclusive.
// -For each i, earning[i][i] will be '0'.
// -For each i and j, earning[i][j] will be equal to earning[j][i].
// 
// 
// EXAMPLES
// 
// 0)
// {1, 1}
// {"02", "20"}
// 
// Returns: 0
// 
// Hiring both managers is the optimal solution in this example.
// 
// 1)
// {2, 2}
// {"01", "10"}
// 
// Returns: -1
// 
// Here it is best not to hire any manager.
// 
// 2)
// {1, 2, 3, 4}
// {"0121", "1021", "2201", "1110"}
// 
// Returns: -1
// 
// 
// 
// 3)
// {2, 2, 0, 1, 4, 0, 1, 0, 0, 4}
// {"0100451253",  "1010518123",  "0102989242",  "0020093171",  "4590045480",  "5189400676",  "1893500826",  "2121468008",  "5247872007",  "3321066870"}
// 
// Returns: 156
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
