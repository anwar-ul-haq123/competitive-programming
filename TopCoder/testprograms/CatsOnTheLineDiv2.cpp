#include <bits/stdc++.h>

#define in freopen("input.txt", "r", stdin);
#define out freopen("output.txt", "w", stdout);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define mp(a, b) make_pair(a, b)
#define infinity (1 << 28)
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define CF ios_base::sync_with_stdio(0);cin.tie(0);
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define SZ(v) (int)(v.size())
#define eps 10e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;

//template <class T> T sqr(T a){return a * a;}    // square
//template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}     //  n  to the power p
//template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
//template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}    // extract words or numbers from a line
//template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}    // convert a number to string
//template <class T> inline T Mod(T n,T m) {return (n%m+m)%m;}    // negative mod
//template <class T> void show(T a){cout << a << endl;}
//template <class T> void show(T a, T b){cout << a << ' ' << b << endl;}
//LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}

#define MAX 200010
/*************************************************HABIJABI ENDS HERE******************************************************/

int arr[MAX], mx;
vector <pair<int, int> > vec;

int call(int pos, int cnt)
{
    int both = 0, lef = 0, rig = 0, baki = cnt, i, j, ret;
    if(lef == ret)
    {
        baki = cnt;
        if(baki && arr[pos] == 0) arr[pos] = 1, baki--;
        for(i = pos - 1; baki; i--)
            if(baki && arr[i] == 0) arr[i] = 1,baki--;
    }
    else if(rig == ret)
    {
        baki = cnt;
        if(baki && arr[pos] == 0) arr[pos] = 1, baki--;
        for(i = pos + 1; baki; i++)
            if(baki && arr[i] == 0) arr[i] = 1,baki--;
    }
    else
    {
        baki = cnt;
        if(baki && arr[pos] == 0) arr[pos] = 1, baki--;
        for(i = pos + 1, j = pos - 1; baki; i++, j--)
        {
            if(baki && arr[i] == 0) arr[i] = 1,baki--;
            if(baki && arr[j] == 0) arr[j] = 1,baki--;
        }
    }
    return ret;
}

bool comp(const pair<int, int> & a, const pair <int, int> &b)
{
    return a.second > b.second;
}


class CatsOnTheLineDiv2 {
public:
	string getAnswer(vector <int> position, vector <int> count, int time) {
	    clr(arr, 0);
		vec.clear();
		for(int i = 0; i < SZ(position); i++)
        {
            position[i] += 50000;
            vec.pb(mp(position[i], count[i]));
        }
        sort(all(vec), comp);
        for(int i = 0; i < SZ(vec); i++)
        {
            int tem = call(vec[i].first, vec[i].second);
            if(tem > time)
                return "Impossible";
        }
        return "Possible";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	CatsOnTheLineDiv2 *obj;
	string answer;
	obj = new CatsOnTheLineDiv2();
	clock_t startTime = clock();
	answer = obj->getAnswer(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	vector <int> p0;
	vector <int> p1;
	int p2;
	string p3;

	// ----- test 0 -----
	disabled = false;
	p0 = {0};
	p1 = {7};
	p2 = 3;
	p3 = "Possible";
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = {0};
	p1 = {8};
	p2 = 2;
	p3 = "Impossible";
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = {0,1};
	p1 = {3,1};
	p2 = 0;
	p3 = "Impossible";
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = {5,0,2};
	p1 = {2,3,5};
	p2 = 2;
	p3 = "Impossible";
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = {5,1,-10,7,12,2,10,20};
	p1 = {3,4,2,7,1,4,3,4};
	p2 = 6;
	p3 = "Possible";
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// There are some cats sitting on a straight line that goes from the left to the right.
// You are given two vector <int>s position and count.
// For each valid i, there are count[i] cats initially sitting at the point position[i].
//
//
//
//
// During each minute, each cat chooses and performs one of three possible actions: it may stay in its place, move one unit to the left (i.e., from x to x-1), or move one unit to the right (i.e., from x to x+1).
// (Note that there are no restrictions. In particular, different cats that are currently at the same point may make different choices.)
//
//
//
//
// You are also given an int time.
// The goal is to rearrange the cats in such a way that each point contains at most one cat.
// Return "Possible" if it's possible to achive the goal in time minutes, and "Impossible" otherwise (quotes for clarity).
//
//
// DEFINITION
// Class:CatsOnTheLineDiv2
// Method:getAnswer
// Parameters:vector <int>, vector <int>, int
// Returns:string
// Method signature:string getAnswer(vector <int> position, vector <int> count, int time)
//
//
// CONSTRAINTS
// -position will contain between 1 and 50 elements, inclusive.
// -position and count will contain the same number of elements.
// -Each element of position will be between -1000 and 1000, inclusive.
// -All elements of position will be distinct.
// -Each element of count will be between 1 and 1000, inclusive.
// -time will be between 0 and 1000, inclusive.
//
//
// EXAMPLES
//
// 0)
// {0}
// {7}
// 3
//
// Returns: "Possible"
//
// There are 7 cats sitting at the origin in this case. There are also 7 different points that cats can reach in 3 minutes, so each cat can occupy a unique point. Thus, the answer is "Possible".
//
// 1)
// {0}
// {8}
// 2
//
// Returns: "Impossible"
//
// Unlike the first test case, in this case there are 8 cats for 7 available points. Thus, the answer is "Impossible".
//
// 2)
// {0, 1}
// {3, 1}
// 0
//
// Returns: "Impossible"
//
//
//
// 3)
// {5, 0, 2}
// {2, 3, 5}
// 2
//
// Returns: "Impossible"
//
//
//
// 4)
// {5, 1, -10, 7, 12, 2, 10, 20}
// {3, 4, 2, 7, 1, 4, 3, 4}
// 6
//
// Returns: "Possible"
//
//
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
