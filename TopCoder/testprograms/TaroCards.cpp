#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define infinity (1 << 28)
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define SZ(v) (int)(v.size())
#define eps 10e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;

template <class T> T sqr(T a){return a * a;}    // square
template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}     //  n  to the power p
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}    // extract words or numbers from a line
template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}    // convert a number to string
template <class T> inline T Mod(T n,T m) {return (n%m+m)%m;}    // negative mod
template <class T> void print_all(T v) {for(int i = 0; i < v.size(); i++) cout << v[i] << ' ';};
template <class T> void print_all(T &v, int len) {for(int i = 0; i < len; i++) cout << v[i] << ' ';}     // prints all elements in a vector or array
template <class T> void print_pair(T v, int len) {for(int i = 0; i < len; i++) cout << v[i].first << ' ' << v[i].second << endl;} // prints pair vector
//LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}

#define MAX 100010
/*************************************************HABIJABI ENDS HERE******************************************************/

class TaroCards {
public:
	long long getNumber(vector <int> first, vector <int> second, int K) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, long long p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	TaroCards *obj;
	long long answer;
	obj = new TaroCards();
	clock_t startTime = clock();
	answer = obj->getNumber(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	long long p3;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {1,2};
	p1 = {2,3};
	p2 = 2;
	p3 = 3ll;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {3,1,2};
	p1 = {1,1,1};
	p2 = 3;
	p3 = 8ll;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {4,2,1,3};
	p1 = {1,2,3,4};
	p2 = 5;
	p3 = 16ll;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {1,2,3,4,5,6,7};
	p1 = {2,1,10,9,3,2,2};
	p2 = 3;
	p3 = 17ll;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {1};
	p1 = {2};
	p2 = 1;
	p3 = 1ll;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = {6,20,1,11,19,14,2,8,15,21,9,10,4,16,12,17,13,22,7,18,3,5};
	p1 = {4,5,10,7,6,2,1,10,10,7,9,4,5,9,5,10,10,3,6,6,4,4};
	p2 = 14;
	p3 = 2239000ll;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Cat Taro has N cards.
// Exactly two integers are written on each card.
// You are given two vector <int>s first and second, each with N elements.
// For each i, the element first[i] represents the first integer on the i-th card, and the element second[i] represents the second integer on the i-th card.
// 
// 
// 
// 
// It is known that for each x from 1 to N, inclusive, there is exactly one card with the first integer equal to x.
// In other words, all elements of first represent a permutation of integers from 1 to N, inclusive.
// On the other hand, second may contain duplicates, but all elements of second are only between 1 and 10, inclusive.
// 
// 
// 
// 
// You are also given an int K. Taro wants to choose some subset of the cards (possibly none or all of them) in such a way that the total number of different integers written on the cards is less than or equal to K. Return the total number of ways to do that.
// 
// 
// DEFINITION
// Class:TaroCards
// Method:getNumber
// Parameters:vector <int>, vector <int>, int
// Returns:long long
// Method signature:long long getNumber(vector <int> first, vector <int> second, int K)
// 
// 
// CONSTRAINTS
// -first will contain between 1 and 50 elements, inclusive.
// -first and second will contain the same number of elements.
// -first will represent a permutation of integers between 1 and N, inclusive, where N is the number of elements in first.
// -Each element of second will be between 1 and 10, inclusive.
// -K will be between 1 and 2N, inclusive, where N is the number of elements in first.
// 
// 
// EXAMPLES
// 
// 0)
// {1, 2}
// {2, 3}
// 2
// 
// Returns: 3
// 
// In this case, there are four subsets of cards:
// 
// 
// None of the cards. The number of different integers is 0.
// 
// 
// Only the first card. The number of different integers is 2.
// 
// 
// Only the second card. The number of different integers is 2.
// 
// 
// Both the first and the second card. The number of different integers is 3.
// 
// 
// However, the last subset has too many different integers. Thus, the answer is 3.
// 
// 1)
// {3, 1, 2}
// {1, 1, 1}
// 3
// 
// Returns: 8
// 
// 
// 
// 2)
// {4, 2, 1, 3}
// {1, 2, 3, 4}
// 5
// 
// Returns: 16
// 
// 
// 
// 3)
// {1, 2, 3, 4, 5, 6, 7}
// {2, 1, 10, 9, 3, 2, 2}
// 3
// 
// Returns: 17
// 
// 
// 
// 4)
// {1}
// {2}
// 1
// 
// Returns: 1
// 
// 
// 
// 5)
// {6, 20, 1, 11, 19, 14, 2, 8, 15, 21, 9, 10, 4, 16, 12, 17, 13, 22, 7, 18, 3, 5}
// {4, 5, 10, 7, 6, 2, 1, 10, 10, 7, 9, 4, 5, 9, 5, 10, 10, 3, 6, 6, 4, 4}
// 14
// 
// Returns: 2239000
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
