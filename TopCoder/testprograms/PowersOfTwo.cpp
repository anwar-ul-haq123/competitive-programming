#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define infinity (1 << 28)
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define SZ(v) (int)(v.size())
#define eps 10e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;

template <class T> T sqr(T a){return a * a;}    // square
template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}     //  n  to the power p
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}    // extract words or numbers from a line
template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}    // convert a number to string
template <class T> inline T Mod(T n,T m) {return (n%m+m)%m;}    // negative mod
template <class T> void print_all(T v) {for(int i = 0; i < v.size(); i++) cout << v[i] << ' ';};
template <class T> void print_all(T &v, int len) {for(int i = 0; i < len; i++) cout << v[i] << ' ';}     // prints all elements in a vector or array
template <class T> void print_pair(T v, int len) {for(int i = 0; i < len; i++) cout << v[i].first << ' ' << v[i].second << endl;} // prints pair vector
//LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}

#define MAX 100010
/*************************************************HABIJABI ENDS HERE******************************************************/

class PowersOfTwo {
public:
    LL arr[1 << 25];
    LL f[26], s[26];
	long long count(vector<long long> powers) {

        int n = SZ(powers), lim, i, j;
        lim = n / 2;
        for(i = 0; i < lim; i++)
            f[i] = powers[i];
        for(i = lim, j = 0; i < n; i++, j++)
            s[j] = powers[lim + j];
        int ac = 0;
        for(i = 0; i < (1 << lim); i++)
        {
            arr[ac] = 0;
            LL tem = 0;
            for(j = 0; j < lim; j++)
            {
                if(i & (1 << j))
                    tem += f[j];
            }
//            if(mpp.find(tem) == mpp.end())
            {
                arr[ac] = tem;
//                mpp[tem] = 1;
                ac++;
            }
        }
        sort(arr, arr + ac);
        for(i = 0; i < ac; i++)
            cout << arr[i] << endl;
        lim = n - lim;
        LL res = 0;
        map <LL, int> mpp;
        for(i = 0; i < (1 << lim); i++)
        {
            LL sum = 0;
            for(j = 0; j < lim; j++)
            {
                if(i & (1 << j))
                    sum += s[j];
            }
            cout << sum << ' ' <<(upper_bound(arr, arr + ac, sum) - lower_bound(arr, arr + ac, sum)) << endl;
//            if(mpp.find(sum) == mpp.end())
            {
                res += ac;
                mpp[sum] = 1;
            }
            else
                res++;
        }
        return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector<long long> p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	PowersOfTwo *obj;
	long long answer;
	obj = new PowersOfTwo();
	clock_t startTime = clock();
	answer = obj->count(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	vector<long long> p0;
	long long p1;

	// ----- test 0 -----
	disabled = false;
	p0 = {1ll,2ll};
	p1 = 4ll;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = {1ll,1ll,1ll,1ll};
	p1 = 5ll;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = true;
	p0 = {1ll,2ll,2ll,2ll,4ll,4ll,16ll};
	p1 = 32ll;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = true;
	p0 = {1ll,32ll,1ll,16ll,32ll};
	p1 = 18ll;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = true;
	p0 = {1048576ll,1073741824ll,549755813888ll,70368744177664ll,4398046511104ll,262144ll,1048576ll,2097152ll,8796093022208ll,1048576ll,1048576ll,35184372088832ll,2097152ll,256ll,256ll,256ll,262144ll,1048576ll,1048576ll,70368744177664ll,262144ll,1048576ll};
	p1 = 18432ll;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Fox Ciel likes powers of two.
// She has a bag with some positive powers of two.
// Note that some powers may occur multiple times in the bag.
// You are given a vector<long long> powers.
// Each element of powers is one of the numbers in Ciel's bag.
//
// Ciel likes each non-negative integer that can be written as the sum of some numbers from her bag.
//
// For example, suppose that her bag contains the numbers 2, 4, 4, and 64.
// In this case, Ciel likes 10 (because 10=2+4+4), 64 (because 64=64), and also 0 (the sum of no numbers).
// She does not like 1, and she does not like 12 (note that 12=4+4+4 is not valid, as she only has two 4s; 12=4+4+2+2 is also not valid, as she only has one 2).
//
// Return the number of integers Ciel likes.
//
// DEFINITION
// Class:PowersOfTwo
// Method:count
// Parameters:vector<long long>
// Returns:long long
// Method signature:long long count(vector<long long> powers)
//
//
// CONSTRAINTS
// -powers will contain between 1 and 50 elements, inclusive.
// -Each element of powers is a power of two between 1 and 2^50, inclusive.
//
//
// EXAMPLES
//
// 0)
// {1,2}
//
// Returns: 4
//
// Fox Ciel likes 0, 1, 2 and 3.
//
// 1)
// {1,1,1,1}
//
// Returns: 5
//
// Fox Ciel likes 0, 1, 2, 3 and 4.
//
// 2)
// {1,2,2,2,4,4,16}
//
// Returns: 32
//
//
//
// 3)
// {1,32,1,16,32}
//
// Returns: 18
//
//
//
// 4)
// {1048576,1073741824,549755813888,70368744177664,4398046511104,262144,1048576,2097152,8796093022208,
//  1048576,1048576,35184372088832,2097152,256,256,256,262144,1048576,1048576,70368744177664,262144,1048576}
//
// Returns: 18432
//
//
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
