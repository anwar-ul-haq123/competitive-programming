#include <bits/stdc++.h>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define infinity 2147483647
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define _ ios_base::sync_with_stdio(0);cin.tie(0);

#define F(i, n) for(i = 0; i < n; i++)

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;

template <class T> T sqr(T a){return a * a;}    // square
template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}     //  n  to the power p
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}    // extract words or numbers from a line
template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str;}    // convert a number to string
template <class T> inline T Mod(T n,T m) {return (n%m+m)%m;}    // negative mod
template <class T> void print_all(T v) {for(int i = 0; i < v.size(); i++) cout << v[i] << ' ';};
template <class T> void print_all(T &v, int len) {for(int i = 0; i < len; i++) cout << v[i] << ' ';}     // prints all elements in a vector or array
template <class T> void print_pair(T v, int len) {for(int i = 0; i < len; i++) cout << v[i].first << ' ' << v[i].second << endl;} // prints pair vector
//LL bigmod(LL B,LL P,LL M){  LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}

#define SZ 1000010
/*************************************************HABIJABI ENDS HERE******************************************************/


class FoxAndGomoku {
public:
	string win(vector <string> board) {

	_
	int n = board.size(), i, j, sum, k;
	int arr[20][20], tem[20][20];
	clr(arr, 0);
	clr(tem, 0);
	for(i = 0; i < n; i++)
    {
        for(j = 0; j < n; j++)
        {
            if(board[i][j] == 'o')
                arr[i][j] = tem[i][j] = 1;
        }
    }
    sum = 0;
    for(i = 0; i < n; i++)
    {
        for(j = 1; j < n; j++)
        {
            if(arr[i][j] == 1)
            {
                arr[i][j] += arr[i][j - 1];
                sum = max(sum, arr[i][j]);
            }
        }
    }
    for(i = 0; i < n; i++)
        for(j = 0; j < n; j++)
            arr[i][j] = tem[i][j];
    for(i = 1; i < n; i++)
    {
        for(j = 0; j < n; j++)
        {
            if(arr[i][j] == 1)
            {
                arr[i][j] += arr[i - 1][j];
                sum = max(sum, arr[i][j]);
            }
        }
    }
    for(i = 0; i < n; i++)
        for(j = 0; j < n; j++)
            arr[i][j] = tem[i][j];
    for(i = 1; i < n; i++)
    {
        for(j = 1; j < n; j++)
        {
            for(k = 0; k < n - 1; k++)
            {
                if(arr[i + k][j + k] == 1)
                {
                    arr[i + k][j + k] += arr[i + k - 1][j + k - 1];
                    sum = max(sum, arr[i + k][j + k]);
                }
            }
        }
    }
    for(i = 0; i < n; i++)
        for(j = 0; j < n; j++)
            arr[i][j] = tem[i][j];
    for(i = 1; i < n; i++)
    {
        for(j = n - 2; j > 0; j--)
        {
            for(k = 0; k < n - 1; k++)
            {
                if(arr[i + k][j - k] == 1)
                {
                    arr[i + k][j - k] += arr[i + k - 1][j - k + 1];
                    sum = max(sum, arr[i + k][j - k]);
                }
            }
        }
    }
    if(sum >= 5)
        return "found";
    return "not found";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	FoxAndGomoku *obj;
	string answer;
	obj = new FoxAndGomoku();
	clock_t startTime = clock();
	answer = obj->win(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	string p1;

	{
	// ----- test 0 -----
	string t0[] = {"....o.","...o..","..o...",".o....","o.....","......"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "found";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"oooo.",".oooo","oooo.",".oooo","....."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "not found";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"oooo.",".oooo","oooo.",".oooo","....o"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "found";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"o.....",".o....","..o...","...o..","....o.","......"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "found";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	string t0[] = {"o....","o.o..","o.o.o","o.o..","o...."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "found";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	string t0[] = {"..........","..........","..oooooo..","..o.......","..o.......","..oooooo..",".......o..",".......o..","..oooooo..",".........."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "found";
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 6 -----
	string t0[] = {"..........","..........","..oooo.o..","..o.......","..o.......","..o.oooo..",".......o..",".......o..","..oooo.o..",".........."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "not found";
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 7 -----
	string t0[] = {"ooooo","ooooo","ooooo","ooooo","ooooo"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "found";
	all_right = KawigiEdit_RunTest(7, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 8 -----
	string t0[] = {".....",".....",".....",".....","....."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "not found";
	all_right = KawigiEdit_RunTest(8, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Fox Ciel is going to play Gomoku with her friend Fox Jiro.
// Ciel plays better, so before they start she allowed Jiro to put some of his pieces on the board.
//
//
// You are given a vector <string> board that represents a square board.
// The character board[i][j] represents the cell with coordinates (i,j).
// Each of those characters is either '.' (representing an empty cell) or 'o' (representing a cell with Jiro's piece).
//
//
// Of course, Ciel does not want Jiro to win the game before she has a chance to play.
// Thus she now has to check the board and determine whether there are five consecutive tokens somewhere on the board.
//
//
// Determine whether there are 5 consecutive cells (horizontally, vertically, or diagonally) that contain Jiro's tokens.
// Return "found" (quotes for clarity) if there are five such cells anywhere on the board.
// Otherwise, return "not found".
//
// DEFINITION
// Class:FoxAndGomoku
// Method:win
// Parameters:vector <string>
// Returns:string
// Method signature:string win(vector <string> board)
//
//
// CONSTRAINTS
// -n will be between 5 and 15, inclusive.
// -board will contain exactly n elements.
// -Each element in board will contain exactly n characters.
// -Each character in board will be 'o' or '.'.
//
//
// EXAMPLES
//
// 0)
// {"....o.",
//  "...o..",
//  "..o...",
//  ".o....",
//  "o.....",
//  "......"}
//
// Returns: "found"
//
// There is five continue pieces diagonally.
//
// 1)
// {"oooo.",
//  ".oooo",
//  "oooo.",
//  ".oooo",
//  "....."}
//
//
// Returns: "not found"
//
// There is no five-in-a-row on this board.
//
// 2)
// {"oooo.",
//  ".oooo",
//  "oooo.",
//  ".oooo",
//  "....o"}
//
//
// Returns: "found"
//
// Five consecutive tokens can be found in the following cells: (0,0), (1,1), (2,2), (3,3), and (4,4).
//
// 3)
// {"o.....",
//  ".o....",
//  "..o...",
//  "...o..",
//  "....o.",
//  "......"}
//
// Returns: "found"
//
//
//
// 4)
// {"o....",
//  "o.o..",
//  "o.o.o",
//  "o.o..",
//  "o...."}
//
// Returns: "found"
//
//
//
// 5)
// {"..........",
//  "..........",
//  "..oooooo..",
//  "..o.......",
//  "..o.......",
//  "..oooooo..",
//  ".......o..",
//  ".......o..",
//  "..oooooo..",
//  ".........."}
//
//
//
// Returns: "found"
//
//
//
// 6)
// {"..........",
//  "..........",
//  "..oooo.o..",
//  "..o.......",
//  "..o.......",
//  "..o.oooo..",
//  ".......o..",
//  ".......o..",
//  "..oooo.o..",
//  ".........."}
//
//
// Returns: "not found"
//
//
//
// 7)
// {"ooooo",
//  "ooooo",
//  "ooooo",
//  "ooooo",
//  "ooooo"}
//
// Returns: "found"
//
//
//
// 8)
// {".....",
//  ".....",
//  ".....",
//  ".....",
//  "....."}
//
// Returns: "not found"
//
//
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
