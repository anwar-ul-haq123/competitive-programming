#include <bits/stdc++.h>

#define in freopen("input.txt", "r", stdin);
#define out freopen("output.txt", "w", stdout);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define mp(a, b) make_pair(a, b)
#define infinity (1 << 28)
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define CF ios_base::sync_with_stdio(0);cin.tie(0);
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // __builtin_popcountll for LL
#define SZ(v) (int)(v.size())
#define eps 1e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};
template <class T> T sqr(T a){return a * a;}
template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}
template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}
//LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}
struct fast{fast(){ios_base::sync_with_stdio(0);cin.tie(0);}}cincout;

#define MAX 200010
/***********************************THE GRASS IS ALWAYS GREENER ON THE OTHER SIDE***********************************/


class ProblemSets {
public:
    LL min3(LL a, LL b, LL c)
    {
        return min(a, min(b, c));
    }
	long long maxSets(long long E, long long EM, long long M, long long MH, long long H) {
		LL elow = 0, ehigh = EM, elmid, ermid, mlow, mhigh = MH, mlmid, mrmid, cur = 0, j, preel = -1, preer = -1, preml = -1, premr = -1;
		for(int i = 0; i < 200; i++)
        {
            LL lres = 0, rres = 0;
            elmid = elow + (ehigh-elow) / 3;
            ermid = ehigh - (ehigh-elow) / 3;
            if(preel == elmid && preer == ermid)
                elmid = ermid = (elmid+ermid) / 2;
            preel = elmid;
            preer = ermid;
            mlow = 0, mhigh = MH;
            preml = premr = -1;
            for(j = 0; j < 200; j++)
            {
                mlmid = mlow + (mhigh-mlow) / 3;
                mrmid = mhigh - (mhigh-mlow) / 3;
                if(preml == mlmid && premr == mrmid)
                    mlmid = mrmid = (mlmid+mrmid) / 2;
                preml = mlmid;
                premr = mrmid;
                LL a = 0, b = 0;
                a = min3(E+elmid, M+EM-elmid+mlmid, H+MH-mlmid);
                b = min3(E+elmid, M+EM-elmid+mrmid, H+MH-mrmid);

                if(a > b)
                {
                    lres = max(lres, a);
                    mhigh = mrmid;
                }
                else
                {
                    lres = max(lres, b);
                    mlow = mlmid;
                }
            }
            mlow = 0, mhigh = MH;
            preml = premr = -1;
            for(j = 0; j < 200; j++)
            {
                mlmid = mlow + (mhigh-mlow) / 3;
                mrmid = mhigh - (mhigh-mlow) / 3;
                if(preml == mlmid && premr == mrmid)
                    mlmid = mrmid = (mlmid+mrmid) / 2;
                preml = mlmid;
                premr = mrmid;
                LL a = 0, b = 0;
                a = min3(E+ermid, M+EM-ermid+mlmid, H+MH-mlmid);
                b = min3(E+ermid, M+EM-ermid+mrmid, H+MH-mrmid);

                if(a > b)
                {
                    rres = max(rres, a);
                    mhigh = mrmid;
                }
                else
                {
                    rres = max(rres, b);
                    mlow = mlmid;
                }
            }
            if(lres > rres)
            {
                cur = max(cur, lres);
                ehigh = ermid;
            }
            else
            {
                cur = max(cur, rres);
                elow = elmid;
            }
        }
		return cur;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, long long p0, long long p1, long long p2, long long p3, long long p4, bool hasAnswer, long long p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4;
	cout << "]" << endl;
	ProblemSets *obj;
	long long answer;
	obj = new ProblemSets();
	clock_t startTime = clock();
	answer = obj->maxSets(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	long long p0;
	long long p1;
	long long p2;
	long long p3;
	long long p4;
	long long p5;

	// ----- test 0 -----
	disabled = false;
	p0 = 2ll;
	p1 = 2ll;
	p2 = 1ll;
	p3 = 2ll;
	p4 = 2ll;
	p5 = 3ll;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = 100ll;
	p1 = 100ll;
	p2 = 100ll;
	p3 = 0ll;
	p4 = 0ll;
	p5 = 0ll;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = 657ll;
	p1 = 657ll;
	p2 = 657ll;
	p3 = 657ll;
	p4 = 657ll;
	p5 = 1095ll;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = 1ll;
	p1 = 2ll;
	p2 = 3ll;
	p3 = 4ll;
	p4 = 5ll;
	p5 = 3ll;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = 1000000000000000000ll;
	p1 = 1000000000000000000ll;
	p2 = 1000000000000000000ll;
	p3 = 1000000000000000000ll;
	p4 = 1000000000000000000ll;
	p5 = 1666666666666666666ll;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 5 -----
	disabled = false;
	p0 = 0ll;
	p1 = 2ll;
	p2 = 0ll;
	p3 = 4ll;
	p4 = 0ll;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, false, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
