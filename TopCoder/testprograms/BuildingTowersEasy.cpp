#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <assert.h>

#define in freopen("input.txt", "r", stdin);
#define out freopen("output.txt", "w", stdout);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define mp(a, b) make_pair(a, b)
#define infinity (1 << 28)
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define CF ios_base::sync_with_stdio(0);cin.tie(0);
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define SZ(v) (int)(v.size())
#define eps 10e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

//struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;
//
//template <class T> T sqr(T a){return a * a;}    // square
//template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}     //  n  to the power p
//template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
//template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}    // extract words or numbers from a line
//template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}    // convert a number to string
//template <class T> inline T Mod(T n,T m) {return (n%m+m)%m;}    // negative mod
//template <class T> void show(T a){cout << a << endl;}
//template <class T> void show(T a, T b){cout << a << ' ' << b << endl;}
//LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}

#define MAX 100010
/***********************************THE GRASS IS ALWAYS GREENER ON THE OTHER SIDE***********************************/

class BuildingTowersEasy {
public:

    pair <int, int> dp[52][MAX];
    vector <int> X, T;
    bool visited[52][MAX];
    int n;

    pair <int, int> call(int indx, int lastH)
    {
        if(indx == SZ(X))
            return mp(n-X[indx-1]+T[indx-1], 1);
        auto &ret = dp[indx][lastH];
        if(visited[indx][lastH]) return ret;
        visited[indx][lastH] = true;
        ret = mp(0, 0);
        int m = X[indx] - X[indx-1] - 1;
        ret = mp(((m+1) / 2) + lastH, 0);
        for(int i = 0; i <= T[indx]; i++)
            call(indx+1, i);
        return ret;
    }

	int maxHeight(int N, vector <int> x, vector <int> t) {
	    x.pb(0);
	    t.pb(0);
		n = N;
		X = x;
		T = t;
		clr(visited, 0);
		return call(1, 0).second;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, vector <int> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	BuildingTowersEasy *obj;
	int answer;
	obj = new BuildingTowersEasy();
	clock_t startTime = clock();
	answer = obj->maxHeight(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	int p0;
	vector <int> p1;
	vector <int> p2;
	int p3;

	// ----- test 0 -----
	disabled = false;
	p0 = 10;
	p1 = {3,8};
	p2 = {1,1};
	p3 = 3;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = 100000;
	p1 = {};
	p2 = {};
	p3 = 99999;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = 2718;
	p1 = {1,30,400,1300,2500};
	p2 = {100000,100000,100000,100000,100000};
	p3 = 2717;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = 20;
	p1 = {4,7,13,15,18};
	p2 = {3,8,1,17,16};
	p3 = 8;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = 447;
	p1 = {32,35,55,60,61,88,91,97,128,151,181,186,192,196,198,237,259,268,291,314,341,367,389,390,391,428,435};
	p2 = {81,221,172,641,25,953,330,141,123,440,692,394,200,649,78,726,50,810,501,4,216,407,2,172,0,29,14};
	p3 = 120;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 5 -----
	disabled = false;
	p0 = 97638;
	p1 = {8,1749,4550,5388,6752,7089,9737,14891,16671,16821,17691,19753,24589,25348,30114,32213,34376,36467,37699,41490,44784,44893,57316,58275,58567,61122,61489,63195,64776,65905,68788,69908,72853,78152,78784,82779,84488,86277,88611,92793,93214,97583};
	p2 = {16610,6,497,14,42892,31,79,1203,518,31147,597,7846,1396,8309,12,14,1148,433,23693,13,1939,244,19,46,27,611,412,10,27023,19141,34,15667,588,10,229,83,390,14,38441,16021,4,39386};
	p3 = 6343;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// The citizens of Byteland want to build N new buildings.
// The new buildings will all stand in a line and they will be labeled 1 through N, in order.
// The city regulations impose some restrictions on the heights of the new buildings.
// You are given the parameters used in these restrictions: two vector <int>s x and t.
// The restrictions are described below.
//
//
// The height of each building must be a nonnegative integer.
// The height of building 1 must be 0.
// The absolute value of the difference between any two adjacent buildings must be at most 1.
// For each valid i, the height of building x[i] must be t[i] or less.
//
//
//
//
// Given these restrictions, the citizens of Byteland want to build a building that will be as tall as possible.
// Return the largest possible height some of the N buildings may have.
//
//
// DEFINITION
// Class:BuildingTowersEasy
// Method:maxHeight
// Parameters:int, vector <int>, vector <int>
// Returns:int
// Method signature:int maxHeight(int N, vector <int> x, vector <int> t)
//
//
// CONSTRAINTS
// -N will be between 1 and 100,000, inclusive.
// -x will contain between 0 and min(N,50) elements, inclusive.
// -t will have exactly the same number of elements as x.
// -Each element of x will be between 1 and N, inclusive.
// -x[i] < x[i+1] for all valid i.
// -Each element of t will be between 0 and 100,000, inclusive.
//
//
// EXAMPLES
//
// 0)
// 10
// {3,8}
// {1,1}
//
// Returns: 3
//
//
// In this case we are going to build 10 buildings.
// We have two constraints: the height of building 3 can be at most 1, and the height of building 8 can also be at most 1.
// The tallest possible new building in this city can have height 3.
// One optimal skyline looks as follows: {0,1,1,2,3,3,2,1,1,0}.
//
//
// 1)
// 100000
// {}
// {}
//
// Returns: 99999
//
// There are no additional constraints so, for each valid i, the height of building i can be (i-1).
//
// 2)
// 2718
// {1,30,400,1300,2500}
// {100000,100000,100000,100000,100000}
//
// Returns: 2717
//
//
//
// 3)
// 20
// {4,7,13,15,18}
// {3,8,1,17,16}
//
// Returns: 8
//
//
//
// 4)
// 447
// {32,35,55,60,61,88,91,97,128,151,181,186,192,196,198,237,259,268,291,314,341,367,389,390,391,428,435}
// {81,221,172,641,25,953,330,141,123,440,692,394,200,649,78,726,50,810,501,4,216,407,2,172,0,29,14}
//
// Returns: 120
//
//
//
// 5)
// 97638
// {8,1749,4550,5388,6752,7089,9737,14891,16671,16821,17691,19753,24589,
// 25348,30114,32213,34376,36467,37699,41490,44784,44893,57316,58275,58567,
// 61122,61489,63195,64776,65905,68788,69908,72853,78152,78784,82779,84488,
// 86277,88611,92793,93214,97583}
// {16610,6,497,14,42892,31,79,1203,518,31147,597,7846,1396,8309,12,14,1148,
// 433,23693,13,1939,244,19,46,27,611,412,10,27023,19141,34,15667,588,10,229,
// 83,390,14,38441,16021,4,39386}
//
// Returns: 6343
//
//
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
