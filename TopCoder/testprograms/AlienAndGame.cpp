#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define infinity 2147483647
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define SZ(v) (int)(v.size())
#define eps 10e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

//struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;

template <class T> T sqr(T a){return a * a;}    // square
template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}     //  n  to the power p
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}    // extract words or numbers from a line
template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}    // convert a number to string
template <class T> inline T Mod(T n,T m) {return (n%m+m)%m;}    // negative mod
template <class T> void print_all(T v) {for(int i = 0; i < v.size(); i++) cout << v[i] << ' ';};
template <class T> void print_all(T &v, int len) {for(int i = 0; i < len; i++) cout << v[i] << ' ';}     // prints all elements in a vector or array
template <class T> void print_pair(T v, int len) {for(int i = 0; i < len; i++) cout << v[i].first << ' ' << v[i].second << endl;} // prints pair vector
//LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}

#define MAX 100010
/*************************************************HABIJABI ENDS HERE******************************************************/

class AlienAndGame {
public:
    int cnt[55][55];
	int getNumber(vector <string> board) {
		int i, j, n = SZ(board), m = SZ(board[0]);
		for(i = 0; i < n; i++)
        {
            cnt[i][0] = 1;
            for(j = 1; j < m; j++)
            {
                if(board[i][j] == board[i][j - 1])
                    cnt[i][j] = cnt[i][j - 1] + 1;
                else
                    cnt[i][j] = 1;
            }
        }
        int ret = 1, len;
        for(j = m - 1; j >= 0; j--)
        {
            for(int k = j + 1; k > 0; k--)
            {
                for(i = 0; i + k <= n; i++)
                {
                    for(len = i; len < i + k; len++)
                    {
                        if(cnt[len][j] < k)
                            break;
                    }
                    if(len >= i + k)
                        ret = max(ret, k);
                }
            }
        }
        return ret * ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	AlienAndGame *obj;
	int answer;
	obj = new AlienAndGame();
	clock_t startTime = clock();
	answer = obj->getNumber(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	vector <string> p0;
	int p1;

	// ----- test 0 -----
	disabled = false;
	p0 = {"BB","WW"};
	p1 = 4;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = {"W"};
	p1 = 1;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = {"WBBB","WBBB","WWWW"};
	p1 = 9;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = {"W","B","W","W","W"};
	p1 = 1;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = {"BWBBWBB","WWBWWBW","BBBBBBW","WBBBBWB","BBWWWWB","WWWWWWW","BBWWBBB"};
	p1 = 9;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// Alien Fred wants to destroy the Earth.
// But before he does that, he wants to play the following game.
//
//
//
//
// He has a rectangular board divided into unit cells.
// Each cell is initially painted black or white.
// You are given a vector <string> board.
// The character board[i][j] represents the cell with coordinates (i, j).
// Each of those characters is either 'B' (representing a black cell) or 'W' (representing a white cell).
// The game is played in turns.
// In each turn Fred can choose any row of the board and repaint all black cells of the row to white, and vice versa.
// (Note that he can only select rows, not columns.
// Formally, he can choose an index i and change all characters of board[i].)
//
//
//
//
// Fred wants to have a large white square somewhere on his board.
// The sides of Fred's square must be parallel to the sides of the board.
// The white square may be a part of a larger white area.
// (I.e., the cells that touch the square may be both black and white.)
// Find a sequence of turns that produces the largest possible white square somewhere on the board, and return the area of that square.
//
//
// DEFINITION
// Class:AlienAndGame
// Method:getNumber
// Parameters:vector <string>
// Returns:int
// Method signature:int getNumber(vector <string> board)
//
//
// CONSTRAINTS
// -board will contain between 1 and 50 elements, inclusive.
// -Each element of board will contain between 1 and 50 characters, inclusive.
// -Each element of board will contain the same number of characters.
// -Each character in each element of board will be either 'B' or 'W'.
//
//
// EXAMPLES
//
// 0)
// {"BB",
//  "WW"}
//
// Returns: 4
//
// The optimal strategy is to repaint row 0. After this change the entire board will be white, and thus we have a 2*2 white square.
//
// 1)
// {"W"}
//
// Returns: 1
//
// Sometimes the optimal strategy requires no repainting.
//
// 2)
// {"WBBB",
//  "WBBB",
//  "WWWW"}
//
// Returns: 9
//
// We should repaint row 0 and then repaint row 1.
// The resulting board will contain a 3*3 white square (in rows 0-2 and columns 1-3).
//
// 3)
// {"W",
//  "B",
//  "W",
//  "W",
//  "W"}
//
// Returns: 1
//
//
//
// 4)
// {"BWBBWBB",
//  "WWBWWBW",
//  "BBBBBBW",
//  "WBBBBWB",
//  "BBWWWWB",
//  "WWWWWWW",
//  "BBWWBBB"}
//
// Returns: 9
//
//
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
