#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define infinity 2147483647
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define SZ(v) (int)(v.size())
#define eps 10e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

//struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;

template <class T> T sqr(T a){return a * a;}    // square
template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}     //  n  to the power p
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}    // extract words or numbers from a line
template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}    // convert a number to string
template <class T> inline T Mod(T n,T m) {return (n%m+m)%m;}    // negative mod
template <class T> void print_all(T v) {for(int i = 0; i < v.size(); i++) cout << v[i] << ' ';};
template <class T> void print_all(T &v, int len) {for(int i = 0; i < len; i++) cout << v[i] << ' ';}     // prints all elements in a vector or array
template <class T> void print_pair(T v, int len) {for(int i = 0; i < len; i++) cout << v[i].first << ' ' << v[i].second << endl;} // prints pair vector
//LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}

#define MAX 100010
/*************************************************HABIJABI ENDS HERE******************************************************/

class Substitute {
public:
	int getValue(string key, string code) {
		int i, j;
		string val;
		for(i = 0; i < SZ(code); i++)
        {
            for(j = 0; j < SZ(key); j++)
            {
                if(code[i] == key[j])
                    val += (j == SZ(key) - 1)? '0' : (j + 1 + '0');
            }
        }
        int ret = 0;
        for(i = 0; i < SZ(val); i++)
            ret = ret * 10 +(val[i] - '0');
        return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	Substitute *obj;
	int answer;
	obj = new Substitute();
	clock_t startTime = clock();
	answer = obj->getValue(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	string p0;
	string p1;
	int p2;

	// ----- test 0 -----
	disabled = false;
	p0 = "TRADINGFEW";
	p1 = "LGXWEV";
	p2 = 709;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = "ABCDEFGHIJ";
	p1 = "XJ";
	p2 = 0;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = "CRYSTALBUM";
	p1 = "MMA";
	p2 = 6;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// A simple, easy to remember system for encoding integer amounts can be very useful.
// For example, dealers at flea markets put the information about an item on a card
// that they let potential buyers see.  They find it advantageous to encode the
// amount they originally paid for the item on the card.
//
// A good system is to use a substitution code, in which each digit is encoded by a
// letter.  An easy to remember 10-letter word or phrase, the key, is chosen. Every
// '1' in the value is replaced by the first letter of the key, every '2' is replaced by the
// second letter of the key, and so on. Every '0' is replaced by the last letter of
// the key.  Letters that do not appear in the key can be inserted anywhere without affecting the value represented by the code..  This
// helps to make the resulting code much harder to break (without knowing the key).
//
// Create a class Substitute that contains the method getValue that is given the
// strings key and code as input and that returns the decoded value.
//
//
//
// DEFINITION
// Class:Substitute
// Method:getValue
// Parameters:string, string
// Returns:int
// Method signature:int getValue(string key, string code)
//
//
// CONSTRAINTS
// -code contains between 1 and 9 characters inclusive, all uppercase letters 'A'-'Z'
// -code contains at least one letter that is found in key
// -key contains exactly 10 uppercase letters 'A'-'Z', all distinct from each other
//
//
// EXAMPLES
//
// 0)
// "TRADINGFEW"
// "LGXWEV"
//
// Returns: 709
//
//
//
// The L,X, and V are ignored since they do not appear in the key. G is the
// seventh letter in the key, W is the 10th letter, and E is the 9th letter.
//
//
//
// 1)
// "ABCDEFGHIJ"
// "XJ"
//
// Returns: 0
//
// 2)
// "CRYSTALBUM"
// "MMA"
//
// Returns: 6
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
