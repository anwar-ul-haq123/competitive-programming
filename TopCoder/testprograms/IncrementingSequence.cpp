#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define infinity (1 << 28)
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define SZ(v) (int)(v.size())
#define eps 10e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;

template <class T> T sqr(T a){return a * a;}    // square
template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}     //  n  to the power p
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}    // extract words or numbers from a line
template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}    // convert a number to string
template <class T> inline T Mod(T n,T m) {return (n%m+m)%m;}    // negative mod
template <class T> void print_all(T v) {for(int i = 0; i < v.size(); i++) cout << v[i] << ' ';};
template <class T> void print_all(T &v, int len) {for(int i = 0; i < len; i++) cout << v[i] << ' ';}     // prints all elements in a vector or array
template <class T> void print_pair(T v, int len) {for(int i = 0; i < len; i++) cout << v[i].first << ' ' << v[i].second << endl;} // prints pair vector
//LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}

#define MAX 510
/*************************************************HABIJABI ENDS HERE******************************************************/

int col[MAX];

class IncrementingSequence {
public:
	string canItBeDone(int k, vector <int> A) {

	    int i;
	    vector <int> extra;
	    clr(col, 0);
        for(i = 0; i < SZ(A); i++)
        {
            if(col[A[i]])
                extra.pb(A[i]);
            else
                col[A[i]]++;
        }
        while(!extra.empty())
        {
            vector <int> tem;
            for(i = 0; i < SZ(extra); i++)
            {
                extra[i] += k;
                if(col[extra[i]] == 0)
                {
                    col[extra[i]] = 1;
                    i++;
                    while(i < SZ(extra))
                        tem.pb(extra[i++]);
                    break;
                }
                tem.pb(extra[i]);
            }
            extra = tem;
//            cout << *min_element(all(extra)) << endl;
            if(*min_element(all(extra)) > SZ(A))
                return "IMPOSSIBLE";
        }
        for(i = 1; i <= SZ(A); i++)
            if(!col[i])
            return "IMPOSSIBLE";
        return "POSSIBLE";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	IncrementingSequence *obj;
	string answer;
	obj = new IncrementingSequence();
	clock_t startTime = clock();
	answer = obj->canItBeDone(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	int p0;
	vector <int> p1;
	string p2;

	// ----- test 0 -----
	disabled = false;
	p0 = 3;
	p1 = {1,2,4,3};
	p2 = "POSSIBLE";
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = 5;
	p1 = {2,2};
	p2 = "IMPOSSIBLE";
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = 1;
	p1 = {1,1,1,1,1,1,1,1};
	p2 = "POSSIBLE";
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = 2;
	p1 = {5,3,3,2,1};
	p2 = "IMPOSSIBLE";
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = 9;
	p1 = {1,2,3,1,4,5,6,7,9,8};
	p2 = "POSSIBLE";
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 5 -----
	disabled = false;
	p0 = 2;
	p1 = {1,1,1,1,1,1,2,2,2,2,2,2};
	p2 = "POSSIBLE";
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 6 -----
	disabled = false;
	p0 = 1;
	p1 = {1};
	p2 = "POSSIBLE";
	all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 7 -----
	disabled = false;
	p0 = 5;
	p1 = {20,13,2,5,13,6,3,4,1,2,18,4,15,19,6,9,8,12,5,16};
	all_right = (disabled || KawigiEdit_RunTest(7, p0, p1, false, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You have a vector <int> A with N elements.
//
// Your goal is to change it into a vector <int> that contains each number from 1 to N exactly once. The change will consist of zero or more steps. In each step, you may pick an arbitrary element of A and increment its value by k. You may pick the same element multiple times. Note that you are not allowed to decrement the value of any element.
//
// You are given the int k and the vector <int> A.
// Return "POSSIBLE" if it is possible to achieve your goal. Return "IMPOSSIBLE" otherwise.
//
// DEFINITION
// Class:IncrementingSequence
// Method:canItBeDone
// Parameters:int, vector <int>
// Returns:string
// Method signature:string canItBeDone(int k, vector <int> A)
//
//
// NOTES
// -Return value is case-sensitive. For example, you can't return "Possible" or "possible" instead of "POSSIBLE".
//
//
// CONSTRAINTS
// -k will be between 1 and 10, inclusive.
// -A will contain between 1 and 50 elements, inclusive.
// -Each element of A will be between 1 and 50, inclusive.
//
//
// EXAMPLES
//
// 0)
// 3
// {1,2,4,3}
//
// Returns: "POSSIBLE"
//
// This sequence of length 4 already contains all numbers from 1 to 4 exactly once. Note that their order does not matter.
//
// 1)
// 5
// {2,2}
//
// Returns: "IMPOSSIBLE"
//
//
//
// 2)
// 1
// {1,1,1,1,1,1,1,1}
//
// Returns: "POSSIBLE"
//
// There are many ways to achieve the goal. For example, it is possible to obtain the sequence {1,2,3,4,5,6,7,8}. To do this, just increment the element at each position one by one until it reaches the required value.
//
// 3)
// 2
// {5,3,3,2,1}
//
// Returns: "IMPOSSIBLE"
//
// We want to have the values {1,2,3,4,5}, in any order. Currently, we are missing the 4. As k=2, the only way to produce a 4 is by incrementing a 2. But if we increment our only 2, we will have no way of producing another 2.
//
// 4)
// 9
// {1,2,3,1,4,5,6,7,9,8}
//
// Returns: "POSSIBLE"
//
//
//
// 5)
// 2
// {1,1,1,1,1,1,2,2,2,2,2,2}
//
// Returns: "POSSIBLE"
//
//
//
// 6)
// 1
// {1}
//
// Returns: "POSSIBLE"
//
//
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
