#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define infinity (1 << 28)
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define SZ(v) (int)(v.size())
#define eps 10e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;

template <class T> T sqr(T a){return a * a;}    // square
template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}     //  n  to the power p
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}    // extract words or numbers from a line
template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}    // convert a number to string
template <class T> inline T Mod(T n,T m) {return (n%m+m)%m;}    // negative mod
template <class T> void print_all(T v) {for(int i = 0; i < v.size(); i++) cout << v[i] << ' ';};
template <class T> void print_all(T &v, int len) {for(int i = 0; i < len; i++) cout << v[i] << ' ';}     // prints all elements in a vector or array
template <class T> void print_pair(T v, int len) {for(int i = 0; i < len; i++) cout << v[i].first << ' ' << v[i].second << endl;} // prints pair vector
//LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}

#define MAX 55
/*************************************************HABIJABI ENDS HERE******************************************************/

int dp[MAX][3][3];

class ConundrumReloaded {
public:
    string s;

    int call(int indx, int status, int first)
    {
        cout << indx << ' ' << status << ' ' << first << endl;
        if(indx == SZ(s) - 1)
        {
            if(status == 2)
                return 0;
            if(status == 1)
            {
                if((s[0] == 'H' && first == 1) || (s[0] == 'L' && first == 0))
                    return 0;
                return infinity;
            }

            if((s[0] == 'L' && first == 1) || (s[0] == 'H' && first == 0))
                return 1;
            return infinity;
        }
        int &ret = dp[indx][status][first];
        if(ret != -1) return ret;
        if(s[indx] == '?')
            return ret = min(call(indx + 1, 1, first), call(indx + 1, 0, first));

        if(status == 1)
            return ret = call(indx + 1, s[indx] == 'H', first);
        return ret = call(indx + 1, !(s[indx] == 'H'), first) + 1;
    }

	int minimumLiars(string answers) {
		s = answers;
		int res = infinity;
		clr(dp, -1);
		if(s[0] == '?')
		{
		    //let honest
		    res = min(res, call(1, 1, 1));
		    res = min(res, call(1, 0, 1));
		    // lier

		    res = min(res, call(1, 1, 0) + 1);
		    res = min(res, call(1, 0, 0) + 1);
		}
		else if(s[0] == 'H')
        {
            res = min(res, call(1, 1, 1));
            res = min(res, call(1, 0, 0) + 1);
        }
        else
        {
            cout << "eito" << endl;
            res = min(res, call(1, 0, 1));
            res = min(res, call(1, 1, 0) + 1);
        }
        if(res >= infinity)
            return -1;
        return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	ConundrumReloaded *obj;
	int answer;
	obj = new ConundrumReloaded();
	clock_t startTime = clock();
	answer = obj->minimumLiars(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	string p0;
	int p1;

	// ----- test 0 -----
	disabled = false;
	p0 = "LLH";
	p1 = 1;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = true;
	p0 = "?" "?" "?" "?" "?";
	p1 = 0;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = true;
	p0 = "LHLH?";
	p1 = 2;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = true;
	p0 = "?" "?LLLLLL?" "?";
	p1 = 3;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = true;
	p0 = "LLL";
	p1 = -1;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Once upon a time, N people sat around a circle. They were numbered 0 through N-1 in counter-clockwise order. Each person was either a honest person or a liar. A honest person always tells the truth, a liar always lies. You asked some of them (possibly all or none) whether the person sitting to the right of them is a liar. You are given their answers in a string answers with N characters. For each i, character i of answers is one of the following:
//
//
// 'L' if person i said that person (i+1) is a liar,
// 'H' if person i said that person (i+1) is a honest person,
// '?' if you didn't ask person i.
//
// (Above, (i+1) is considered modulo N. That is, person N-1 is talking about person 0.)
//
// You are given the string answers. If there is at least one possible combination of honest people and liars that is consistent with answers, return the smallest possible number of liars. Else return -1.
//
// DEFINITION
// Class:ConundrumReloaded
// Method:minimumLiars
// Parameters:string
// Returns:int
// Method signature:int minimumLiars(string answers)
//
//
// CONSTRAINTS
// -answers will contain between 2 and 50 characters, inclusive.
// -Each character in answers will be 'L', 'H' or '?'.
//
//
// EXAMPLES
//
// 0)
// "LLH"
//
// Returns: 1
//
// According to the input:
//
// Person 0 says that person 1 is a liar.
// Person 1 says that person 2 is a liar.
// Person 2 says that person 0 is a honest person.
//
// Clearly, they cannot all be honest, so there is at least one liar. It is possible that person 1 is liar and the other two are honest. Hence, the smallest possible number of liars is one.
//
// (Note that it is also possible that person 1 is honest and the other two are liars.)
//
// 1)
// "?????"
//
// Returns: 0
//
// Nobody told us anything. It is possible that everybody is honest.
//
// 2)
// "LHLH?"
//
// Returns: 2
//
// If person #1 and person #2 are liars, then the answers would be "LHLHH". This is consistent with the answers we received.
//
// 3)
// "??LLLLLL??"
//
// Returns: 3
//
//
//
// 4)
// "LLL"
//
// Returns: -1
//
// Each of the 8 possible combinations of (liar / honest person) will lead to a contradiction.
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
