#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define infinity 2147483647
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define SZ(v) (int)(v.size())
#define eps 10e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

//struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;

template <class T> T sqr(T a){return a * a;}    // square
template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}     //  n  to the power p
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}    // extract words or numbers from a line
template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}    // convert a number to string
template <class T> inline T Mod(T n,T m) {return (n%m+m)%m;}    // negative mod
template <class T> void print_all(T v) {for(int i = 0; i < v.size(); i++) cout << v[i] << ' ';};
template <class T> void print_all(T &v, int len) {for(int i = 0; i < len; i++) cout << v[i] << ' ';}     // prints all elements in a vector or array
template <class T> void print_pair(T v, int len) {for(int i = 0; i < len; i++) cout << v[i].first << ' ' << v[i].second << endl;} // prints pair vector
//LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}

#define MAX 100010
/*************************************************HABIJABI ENDS HERE******************************************************/

class FoxConnection2 {
public:
    vector <int> adj[55];
    LL dp[55][55][55];
    int n, indeg[55];
    const LL mod = 1000000007;

    LL call(int par, int k, int indx)
    {
        if(k == 0 || indx > n)
            return k == 0;
        LL &ret = dp[par][k][indx];
        if(ret != -1)
            return ret;
        ret = 0;
        for(int i = 0; i < SZ(adj[indx]); i++)
        {
            cout << "indx" << indx << endl;
            if(adj[indx][i] == par)
                continue;
            ret += call(indx, k - 1, adj[indx][i]);
            ret %= mod;
        }
        ret %= mod;
        return ret;
    }

	int ways(vector <int> A, vector <int> B, int k) {
		int i;
		n = SZ(A);
		for(i = 0; i < n; i++)
        {
            adj[A[i]].pb(B[i]);
            adj[B[i]].pb(A[i]);
            indeg[A[i]]++; indeg[B[i]]++;
        }
        clr(dp, -1);
        LL res = 0;
        for(i = 1; i <= n; i++)
        {
            if(indeg[i] == 1)
            {
                call(0, k - 1, i);
                break;
            }
        }
        return dp[0][k - 1][i];
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	FoxConnection2 *obj;
	int answer;
	obj = new FoxConnection2();
	clock_t startTime = clock();
	answer = obj->ways(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	vector <int> p0;
	vector <int> p1;
	int p2;
	int p3;

	// ----- test 0 -----
	disabled = true;
	p0 = {1,2,3};
	p1 = {2,3,4};
	p2 = 2;
	p3 = 3;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = true;
	p0 = {1,1,1,1};
	p1 = {2,3,4,5};
	p2 = 3;
	p3 = 6;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = {1,2,3,4};
	p1 = {2,3,4,5};
	p2 = 3;
	p3 = 3;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = true;
	p0 = {1,2,2,4,4};
	p1 = {2,3,4,5,6};
	p2 = 3;
	p3 = 6;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = true;
	p0 = {1,2,2,4,4};
	p1 = {2,3,4,5,6};
	p2 = 5;
	p3 = 4;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 5 -----
	disabled = true;
	p0 = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
	p1 = {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40};
	p2 = 20;
	p3 = 923263934;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 6 -----
	disabled = true;
	p0 = {2};
	p1 = {1};
	p2 = 1;
	p3 = 2;
	all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// There are N cities in Treeland.
// The cities are numbered 1 through N.
// The roads in Treeland have the topology of a tree.
// That is, there are exactly N-1 bidirectional roads in Treeland, each connecting a pair of cities, and it is possible to travel between any two cities along the roads.
//
// You are given two vector <int>s A and B that describe the tree.
// Each of these vector <int>s has N-1 elements.
// For each valid i, there is a road that connects the cities A[i] and B[i].
//
// Currently, k foxes live in a forest in Treeland.
// They would like to move into cities.
// Each fox must live in a different city.
// Therefore, they must select exactly k different cities where they will live.
// Additionally, they have an important constraint:
// The set of cities inhabited by the foxes must be connected.
// That is, for any two different cities i and j that both contain a fox, all the cities on the (only) path between i and j must also contain a fox.
//
// Let X be the number of ways in which we can choose k cities in Treeland in such a way that the constraint is satisfied.
// Return the value (X modulo 1,000,000,007).
// Two selections are different if and only if there is a city selected in one of them but not in the other.
// (Note that we are only selecting a set of cities, we are not assigning individual foxes to the cities.)
//
// DEFINITION
// Class:FoxConnection2
// Method:ways
// Parameters:vector <int>, vector <int>, int
// Returns:int
// Method signature:int ways(vector <int> A, vector <int> B, int k)
//
//
// CONSTRAINTS
// -N will be between 2 and 50, inclusive.
// -A will contain exactly N-1 elements.
// -Each element of A will be between 1 and N, inclusive.
// -B will contain exactly N-1 elements.
// -Each element of B will be between 1 and N, inclusive.
// -The graph described by A and B will be a tree.
// -k will be between 1 and N, inclusive.
//
//
// EXAMPLES
//
// 0)
// {1,2,3}
// {2,3,4}
// 2
//
// Returns: 3
//
// Treeland looks as follows: 1-2-3-4.
// There are 3 ways to put 2 foxes: {1,2}, {2,3} or {3,4}.
//
// 1)
// {1,1,1,1}
// {2,3,4,5}
// 3
//
// Returns: 6
//
// There are 6 ways: {1,2,3}, {1,2,4}, {1,2,5}, {1,3,4}, {1,3,5} and {1,4,5}.
//
// 2)
// {1,2,3,4}
// {2,3,4,5}
// 3
//
// Returns: 3
//
//
//
// 3)
// {1,2,2,4,4}
// {2,3,4,5,6}
// 3
//
// Returns: 6
//
//
//
// 4)
// {1,2,2,4,4}
// {2,3,4,5,6}
// 5
//
// Returns: 4
//
//
//
// 5)
// {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
// {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40}
// 20
//
// Returns: 923263934
//
//
//
// 6)
// {2}
// {1}
// 1
//
// Returns: 2
//
//
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
