#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define infinity 214748364
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define _ ios_base::sync_with_stdio(0);cin.tie(0);
#define SZ(v) (int)(v.size())
#define eps 10e-7

#define F(i, n) for(i = 0; i < n; i++)

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;

template <class T> T sqr(T a){return a * a;}    // square
template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}     //  n  to the power p
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}    // extract words or numbers from a line
template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}    // convert a number to string
template <class T> inline T Mod(T n,T m) {return (n%m+m)%m;}    // negative mod
template <class T> void print_all(T v) {for(int i = 0; i < v.size(); i++) cout << v[i] << ' ';};
template <class T> void print_all(T &v, int len) {for(int i = 0; i < len; i++) cout << v[i] << ' ';}     // prints all elements in a vector or array
template <class T> void print_pair(T v, int len) {for(int i = 0; i < len; i++) cout << v[i].first << ' ' << v[i].second << endl;} // prints pair vector
//LL bigmod(LL B,LL P,LL M){  LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}

#define MAX 100010
/*************************************************HABIJABI ENDS HERE******************************************************/


class ColorfulRoad {
public:
    string s;
    int dp[1 << 17][3];
    string now;
    int call(int indx, int mask, int cur)
    {
        if(indx == SZ(s) - 1)
            return 0;
        int &ret = dp[mask][cur];
        if(ret != -1) return ret;
        ret = infinity;
        int i;
        for(i = indx + 1; i < SZ(s); i++)
        {
            if(s[i] == now[cur])
            {
                ret = min(ret, call(i, mask | (1 << i), (cur + 1) % 3) + sqr(i - indx));
//                cout << ret << endl;
            }
        }
        return ret;
    }

	int getMin(string road) {
		s = road;
		clr(dp, -1);
		now = "RGB";
		int ans = call(0, 1, 1);
		if(ans >= infinity)
            return -1;
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	ColorfulRoad *obj;
	int answer;
	obj = new ColorfulRoad();
	clock_t startTime = clock();
	answer = obj->getMin(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	int p1;

	{
	// ----- test 0 -----
	p0 = "RGGGB";
	p1 = 8;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "RGBRGBRGB";
	p1 = 8;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "RBBGGGRR";
	p1 = -1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "RBRRBGGGBBBBR";
	p1 = 50;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = "RG";
	p1 = 1;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	p0 = "RBRGBGBGGBGRGGG";
	p1 = 52;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// There is a one-dimensional road.
// The road is separated into N consecutive parts.
// The parts are numbered 0 through N-1, in order.
// Ciel is going to walk from part 0 to part N-1.
//
//
// Ciel also noticed that each part of the road has a color: either red, green, or blue.
// Part 0 is red.
//
//
// Ciel is going to perform a sequence of steps.
// Each step must lead in the positive direction.
// That is, if her current part is i, the next step will take her to one of the parts i+1 through N-1, inclusive.
// Her steps can be arbitrarily long.
// However, longer steps are harder: a step of length j costs j*j energy.
//
//
// Additionally, Ciel wants to step on colors in a specific order: red, green, blue, red, green, blue, ...
// That is, she starts on the red part 0, makes a step to a green part, from there to a blue part, and so on, always repeating red, green, and blue in a cycle.
// Note that the final part N-1 also has some color and thus Ciel must reach it in a corresponding step.
//
//
// You are given a string road containing N elements.
// For each i, element i of road is the color of part i: 'R' represents red, 'G' green, and 'B' blue.
// If Ciel can reach part N-1 in the way described above, return the smallest possible total cost of doing so.
// Otherwise, return -1.
//
//
//
// DEFINITION
// Class:ColorfulRoad
// Method:getMin
// Parameters:string
// Returns:int
// Method signature:int getMin(string road)
//
//
// CONSTRAINTS
// -road will contain between 2 and 15 characters, inclusive.
// -Each character of road will be either 'R' or 'G' or 'B'.
// -The first character of road will be 'R'.
//
//
// EXAMPLES
//
// 0)
// "RGGGB"
//
// Returns: 8
//
// The optimum solution is to step part 0 -> part 2 -> part 4.
// The total cost is 2*2 + 2*2 = 8.
//
// 1)
// "RGBRGBRGB"
//
// Returns: 8
//
// The optimum solution is to make steps of length 1.
// It costs 1*1 = 1 per each step, so the total cost is 8.
//
// 2)
// "RBBGGGRR"
//
// Returns: -1
//
// It is impossible to reach the destination.
//
//
// 3)
// "RBRRBGGGBBBBR"
//
// Returns: 50
//
//
//
// 4)
// "RG"
//
// Returns: 1
//
//
//
// 5)
// "RBRGBGBGGBGRGGG"
//
// Returns: 52
//
//
//
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
