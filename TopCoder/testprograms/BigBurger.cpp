#include <bits/stdc++.h>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define infinity 2147483647
#define LL long long
#define Pi acos(-1)
#define SZ 100010
#define VI vector <int>

#define _ ios_base::sync_with_stdio(0);cin.tie(0);

///int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
///int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
///int col[4] = {1, 0, -1, 0};
///int row[4] = {0, 1, 0, -1};
///int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

struct point{int x, y;};

template <class T> T sqr(T a){return a * a;};
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}
template <class T> T GCD(T a, T b) {if(b == 0) return a; return GCD(b, a % b);}
template <class T> T LCM(T a, T b) {return (a * b) / GCD(a, b);}

using namespace std;


class BigBurger {
public:
	int maxWait(vector <int> arrival, vector <int> service) {
	_
    int wait = 0, prev = arrival[0], i, j;
    for(i = 0; i < service.size(); i++)
    {
        wait = max(wait, prev - arrival[i]);
        prev = max(prev, arrival[i]) + service[i];
        cout << prev << endl;
    }
    return wait;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	BigBurger *obj;
	int answer;
	obj = new BigBurger();
	clock_t startTime = clock();
	answer = obj->maxWait(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	vector <int> p1;
	int p2;

	{
	// ----- test 0 -----
	int t0[] = {3,3,9};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,15,14};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 11;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {182};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {11};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {2,10,11};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {3,4,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {2,10,12};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {15,1,15};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 7;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// BigBurger Inc. wants to see if having a single person at the counter both to
// take orders and to serve them is feasible.  At each BigBurger, customers will
// arrive and get in line. When they get to the head of the line they will place
// their order, which will be assembled and served to them.  Then they will leave
// the BigBurger and the next person in line will be able to order.
//
// We need to know how long a customer may be forced to wait before he or she can
// place an order.  Given a script that lists each customer for a typical day,
// we want to calculate the maximum customer waiting time.  Each customer in the
// script is characterized by an arrival time (measured in minutes after the store
// opened) and a service duration (the number of minutes between ordering and
// getting the food).
//
// Create a class BigBurger that contains method maxWait that is given a vector <int>
// arrival and a vector <int> service describing all the customers and returns the
// maximum time spent by a customer between arriving and placing the order. Corresponding
// elements of arrival and service refer to the same customer, and they are
// given in the order in which they arrive at the store (arrival is in non-descending
// order).
//
// If multiple customers arrive at the same time they will all join the line at the
// same time, with the ones listed earlier ahead of ones appearing later in the list.
//
//
//
// DEFINITION
// Class:BigBurger
// Method:maxWait
// Parameters:vector <int>, vector <int>
// Returns:int
// Method signature:int maxWait(vector <int> arrival, vector <int> service)
//
//
// CONSTRAINTS
// -arrival will contain between 1 and 50 elements inclusive
// -service will contain the same number of elements as arrival
// -the elements of arrival will be in non-decreasing order
// -each element of arrival will be between 1 and 720 inclusive
// -each element of service will be between 1 and 15 inclusive
//
//
// EXAMPLES
//
// 0)
// {3,3,9}
// {2,15,14}
//
// Returns: 11
//
//
//    Two customers arrive at time 3. The first one waits 0 time, orders,
// and is  served after 2 minutes, leaving at time 5. The second one then
// orders and is served at time 20.  Meanwhile a customer arrives at
// time 9 and waits until the second customer leaves.  This last customer
// then orders at time 20, and is served and leaves at time 20+14 = 34.
// The first customer waited 0 minutes, the second waited 2 minutes (from
// time 3 to time 5), and the last customer waited 11 minutes (from
// time 9 to time 20).
//
// 1)
// {182}
// {11}
//
// Returns: 0
//
// The first customer never needs to wait.
//
// 2)
// {2,10,11}
// {3,4,3}
//
// Returns: 3
//
// The third customer needs to wait from time 11 to time 14. Neither of the other customers needs to wait at all.
//
// 3)
// {2,10,12}
// {15,1,15}
//
// Returns: 7
//
// The second customer waits the longest.
//
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
