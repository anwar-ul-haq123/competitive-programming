#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define infinity 2147483647
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define SZ(v) (int)(v.size())
#define eps 10e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

//struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;

template <class T> T sqr(T a){return a * a;}    // square
template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}     //  n  to the power p
template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}    // extract words or numbers from a line
template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}    // convert a number to string
template <class T> inline T Mod(T n,T m) {return (n%m+m)%m;}    // negative mod
template <class T> void print_all(T v) {for(int i = 0; i < v.size(); i++) cout << v[i] << ' ';};
template <class T> void print_all(T &v, int len) {for(int i = 0; i < len; i++) cout << v[i] << ' ';}     // prints all elements in a vector or array
template <class T> void print_pair(T v, int len) {for(int i = 0; i < len; i++) cout << v[i].first << ' ' << v[i].second << endl;} // prints pair vector
//LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}

#define MAX 100010
/*************************************************HABIJABI ENDS HERE******************************************************/

class EllysNumberGuessing {
public:
	int getNumber(vector <int> guesses, vector <int> answers) {
		map <int, int> mp;
		vector <pair<int, int> > ans;
		int i, n = SZ(guesses), tem;
		for(i = 0; i < n; i++)
        {
            tem = guesses[i] + answers[i];
            if(tem <= 1000000000)
                mp[tem]++;
            tem = guesses[i] - answers[i];
            if(tem > 0)
                mp[tem]++;
        }
        for(map<int, int> :: iterator it = mp.begin(); it != mp.end(); it++)
            ans.pb(make_pair(it->second, it->first));
        sort(ans.rbegin(), ans.rend());
        if(ans.empty() || ans[0].first != n)
            return -2;
        if(SZ(ans) == 1)
            return ans[0].second;
        if(ans[0].first == ans[1].first && ans[1].first == n)
            return -1;
        if(ans[0].first == n)
            return ans[0].second;
        return -2;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	EllysNumberGuessing *obj;
	int answer;
	obj = new EllysNumberGuessing();
	clock_t startTime = clock();
	answer = obj->getNumber(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	vector <int> p0;
	vector <int> p1;
	int p2;

	// ----- test 0 -----
	disabled = false;
	p0 = {600,594};
	p1 = {6,12};
	p2 = 606;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = {100,50,34,40};
	p1 = {58,8,8,2};
	p2 = 42;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = {500000,600000,700000};
	p1 = {120013,220013,79987};
	p2 = -2;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = {500000000};
	p1 = {133742666};
	p2 = -1;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = {76938260,523164588,14196746,296286419,535893832,41243148,364561227,270003278,472017422,367932361,395758413,301278456,186276934,316343129,336557549,52536121,98343562,356769915,89249181,335191879};
	p1 = {466274085,20047757,529015599,246925926,7318513,501969197,178651118,273209067,71194923,175279984,147453932,241933889,356935411,226869216,206654796,490676224,444868783,186442430,453963164,208020466};
	p2 = 543212345;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 5 -----
	disabled = false;
	p0 = {42};
	p1 = {42};
	p2 = 84;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 6 -----
	disabled = false;
	p0 = {999900000};
	p1 = {100001};
	p2 = 999799999;
	all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 7 -----
	disabled = false;
	p0 = {10,11};
	p1 = {11,11};
	p2 = -2;
	all_right = (disabled || KawigiEdit_RunTest(7, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 8 -----
	disabled = false;
	p0 = {10,10,10};
	p1 = {2,2,2};
	p2 = -1;
	all_right = (disabled || KawigiEdit_RunTest(8, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Elly and Kris play the following game. In the beginning Kristina thinks of a number between 1 and 1,000,000,000, inclusive. After that Elly starts trying to guess it. In each round she says a number and Kristina says what is the absolute difference between the number she has thought of, and the number Elly guessed. Now Elly wonders if the guesses she has already made are sufficient to uniquely determine Kristina's number.
//
// You are given a vector <int> guesses and a vector <int> answers of the same length. For each valid i, in round i of the game (0-based index) Elly guessed the number guesses[i] and Kristina answered answers[i]. If Kristina's number can be uniquely determined, return that number. If there are multiple possibilities that are consistent with the current set of guesses and answers, return -1. If it can be shown that at some point Kristina has lied (some of her answers were inconsistent), return -2.
//
// DEFINITION
// Class:EllysNumberGuessing
// Method:getNumber
// Parameters:vector <int>, vector <int>
// Returns:int
// Method signature:int getNumber(vector <int> guesses, vector <int> answers)
//
//
// CONSTRAINTS
// -guesses and answers will each contain between 1 and 50 elements, inclusive.
// -guesses and answers will contain the same number of elements.
// -Each element of guesses will be between 1 and 1,000,000,000, inclusive.
// -Each element of answers will be between 1 and 999,999,999, inclusive.
//
//
// EXAMPLES
//
// 0)
// {600, 594}
// {6, 12}
//
// Returns: 606
//
// Apparently Kristina has thought of the number of this SRM.
//
// 1)
// {100, 50, 34, 40}
// {58, 8, 8, 2}
//
// Returns: 42
//
// It is not guaranteed that Elly has used a perfect strategy so far.
//
// 2)
// {500000, 600000, 700000}
// {120013, 220013, 79987}
//
// Returns: -2
//
// The answers here are inconsistent. After the second guess we can conclude that the answer is below 500000. But the third one indicates that it is above 500000. Thus, Kristina is a liar and you should return -2.
//
// 3)
// {500000000}
// {133742666}
//
// Returns: -1
//
// There are multiple possibilities here, thus you should return -1.
//
// 4)
// {76938260, 523164588, 14196746, 296286419, 535893832,
//  41243148, 364561227, 270003278, 472017422, 367932361,
//  395758413, 301278456, 186276934, 316343129, 336557549,
//  52536121, 98343562, 356769915, 89249181, 335191879}
// {466274085, 20047757, 529015599, 246925926, 7318513,
//  501969197, 178651118, 273209067, 71194923, 175279984,
//  147453932, 241933889, 356935411, 226869216, 206654796,
//  490676224, 444868783, 186442430, 453963164, 208020466}
//
// Returns: 543212345
//
//
//
// 5)
// {42}
// {42}
//
// Returns: 84
//
// Don't forget that the number Kris has thought of must be between 1 and 1,000,000,000.
//
// 6)
// {999900000}
// {100001}
//
// Returns: 999799999
//
// Don't forget that the number Kris has thought of must be between 1 and 1,000,000,000.
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
