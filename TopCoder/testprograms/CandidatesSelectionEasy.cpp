#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

#define out freopen("output.txt", "w", stdout);
#define in freopen("input.txt", "r", stdin);
#define clr(arr, key) memset(arr, key, sizeof arr)
#define pb push_back
#define infinity (1 << 28)
#define LL long long
#define PI acos(-1)
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a)*((b)/gcd(a,b)))
#define all(v) v.begin(), v.end()
#define no_of_ones __builtin_popcount // count 1's in a numbers binary representation
#define SZ(v) (int)(v.size())
#define eps 10e-7

//int col[8] = {0, 1, 1, 1, 0, -1, -1, -1};
//int row[8] = {1, 1, 0, -1, -1, -1, 0, 1};
//int col[4] = {1, 0, -1, 0};
//int row[4] = {0, 1, 0, -1};
//int months[13] = {0, ,31,28,31,30,31,30,31,31,30,31,30,31};

using namespace std;

struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};    // for coordinates;

//template <class T> T sqr(T a){return a * a;}    // square
//template <class T> T power(T n, T p) { T res = 1; for(int i = 0; i < p; i++) res *= n; return res;}     //  n  to the power p
//template <class T> double getdist(T a, T b){return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));}    // distance between a and b
//template <class T> T extract(string s, T ret) {stringstream ss(s); ss >> ret; return ret;}    // extract words or numbers from a line
//template <class T> string tostring(T n) {stringstream ss; ss << n; return ss.str();}    // convert a number to string
//template <class T> inline T Mod(T n,T m) {return (n%m+m)%m;}    // negative mod
//template <class T> void print_all(T v) {for(int i = 0; i < v.size(); i++) cout << v[i] << ' ';};
//template <class T> void print_all(T &v, int len) {for(int i = 0; i < len; i++) cout << v[i] << ' ';}     // prints all elements in a vector or array
//template <class T> void print_pair(T v, int len) {for(int i = 0; i < len; i++) cout << v[i].first << ' ' << v[i].second << endl;} // prints pair vector
////LL bigmod(LL B,LL P,LL M){LL R=1; while(P>0)  {if(P%2==1){R=(R*B)%M;}P/=2;B=(B*B)%M;} return R;}

#define MAX 100010
/*************************************************HABIJABI ENDS HERE******************************************************/

pair <char, int> arr[MAX];

class CandidatesSelectionEasy {
public:
	vector <int> sort(vector <string> score, int x) {
	    vector <int> ret;
		for(int i = 0; i < SZ(score); i++)
        {
            arr[i].second = i;
            arr[i].first = score[i][x];
            cout << arr[i].first << ' ' << arr[i].second << endl;
        }
        stable_sort(arr, arr + SZ(score));
        for(int i = 0; i < SZ(score); i++)
            ret.pb(arr[i].second);
        return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, vector <int> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	CandidatesSelectionEasy *obj;
	vector <int> answer;
	obj = new CandidatesSelectionEasy();
	clock_t startTime = clock();
	answer = obj->sort(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p2[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	vector <string> p0;
	int p1;
	vector <int> p2;

	// ----- test 0 -----
	disabled = false;
	p0 = {"ACB","BAC","CBA"};
	p1 = 1;
	p2 = {1,2,0};
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = {"A","C","B","C","A"};
	p1 = 0;
	p2 = {0,4,2,1,3};
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = {"LAX","BUR","ONT","LGB","SAN","SNA","SFO","OAK","SJC"};
	p1 = 2;
	p2 = {5,3,8,7,4,6,1,2,0};
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = {"BBCBABAC","BCBACABA","CCCBAACB","CACABABB","AABBBBCC"};
	p1 = 6;
	p2 = {0,1,3,2,4};
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 4 -----
	disabled = false;
	p0 = {"XXYWZWWYXZ","YZZZYWYZYW","ZYZZWZYYWW","ZWZWZWZXYW","ZYXWZXWYXY","YXXXZWXWXW","XWWYZWXYXY","XYYXYWYXWY","ZZYXZYZXYY","WXZXWYZWYY"};
	p1 = 3;
	p2 = {0,3,4,5,7,8,9,6,1,2};
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 5 -----
	disabled = false;
	p0 = {"X"};
	p1 = 0;
	p2 = {0};
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Fox Ciel wants to hire a new maid.
// There are n candidates for the position.
// There are m different skills a maid should have, such as cooking, cleaning, or discreetness.
// Ciel numbered the candidates 0 through n-1 and the skills 0 through m-1.
//
//
//
// Ciel evaluated the level each candidate has in each of the skills.
// You are given this information encoded in a vector <string> score with n elements, each consisting of m characters.
// For each i and j, the character score[i][j] represents the level candidate i has in skill j.
// Said character will always be between 'A' and 'Z', inclusive, where 'A' means the best possible and 'Z' the worst possible candidate.
//
//
//
// You are also given an int x.
// Ciel thinks that skill x is the most important skill a maid should have.
//
//
//
// Return a vector <int> with n elements: the numbers of all candidates, ordered according to their level in skill x from the best to the worst.
// Candidates who have the same level in skill x should be ordered by their number in ascending order.
//
// DEFINITION
// Class:CandidatesSelectionEasy
// Method:sort
// Parameters:vector <string>, int
// Returns:vector <int>
// Method signature:vector <int> sort(vector <string> score, int x)
//
//
// CONSTRAINTS
// -n will be between 1 and 50, inclusive.
// -m will be between 1 and 50, inclusive.
// -score will contain exactly n elements.
// -Each element of score will contain exactly m characters.
// -Each character in each element of score will be an uppercase English letter ('A'-'Z').
// -x will be between 0 and m-1, inclusive.
//
//
// EXAMPLES
//
// 0)
// {"ACB", "BAC", "CBA"}
// 1
//
// Returns: {1, 2, 0 }
//
// The output should be {1, 2, 0}, because the level of candidate 1 in skill 1 is 'A', the level of candidate 2 in this skill is 'B', and the level of candidate 0 is 'C'.
//
// 1)
// {"A", "C", "B", "C", "A"}
// 0
//
// Returns: {0, 4, 2, 1, 3 }
//
// Note that when 2 candidates have same level, they will remain in the original order.
//
// 2)
// {"LAX","BUR","ONT","LGB","SAN","SNA","SFO","OAK","SJC"}
// 2
//
// Returns: {5, 3, 8, 7, 4, 6, 1, 2, 0 }
//
//
//
// 3)
// {"BBCBABAC","BCBACABA","CCCBAACB","CACABABB","AABBBBCC"}
// 6
//
// Returns: {0, 1, 3, 2, 4 }
//
//
//
// 4)
// {"XXYWZWWYXZ","YZZZYWYZYW","ZYZZWZYYWW","ZWZWZWZXYW","ZYXWZXWYXY","YXXXZWXWXW","XWWYZWXYXY","XYYXYWYXWY","ZZYXZYZXYY","WXZXWYZWYY"}
// 3
//
// Returns: {0, 3, 4, 5, 7, 8, 9, 6, 1, 2 }
//
//
//
// 5)
// {"X"}
// 0
//
// Returns: {0 }
//
// Note that we may have only one candidate as well as only 1 skill.
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
